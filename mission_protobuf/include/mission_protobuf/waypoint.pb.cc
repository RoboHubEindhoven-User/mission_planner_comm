// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: waypoint.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "waypoint.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mission_protobuf {

namespace {

const ::google::protobuf::Descriptor* Waypoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Waypoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* Waypoint_ServiceArea_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Waypoint_ServiceArea_reflection_ = NULL;
const ::google::protobuf::Descriptor* WaypointConfiguration_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WaypointConfiguration_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_waypoint_2eproto() {
  protobuf_AddDesc_waypoint_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "waypoint.proto");
  GOOGLE_CHECK(file != NULL);
  Waypoint_descriptor_ = file->message_type(0);
  static const int Waypoint_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Waypoint, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Waypoint, geometry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Waypoint, service_area_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Waypoint, should_scan_),
  };
  Waypoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Waypoint_descriptor_,
      Waypoint::default_instance_,
      Waypoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Waypoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Waypoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Waypoint));
  Waypoint_ServiceArea_descriptor_ = Waypoint_descriptor_->nested_type(0);
  static const int Waypoint_ServiceArea_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Waypoint_ServiceArea, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Waypoint_ServiceArea, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Waypoint_ServiceArea, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Waypoint_ServiceArea, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Waypoint_ServiceArea, diameter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Waypoint_ServiceArea, tilt_angle_),
  };
  Waypoint_ServiceArea_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Waypoint_ServiceArea_descriptor_,
      Waypoint_ServiceArea::default_instance_,
      Waypoint_ServiceArea_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Waypoint_ServiceArea, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Waypoint_ServiceArea, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Waypoint_ServiceArea));
  WaypointConfiguration_descriptor_ = file->message_type(1);
  static const int WaypointConfiguration_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaypointConfiguration, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaypointConfiguration, wapoint_),
  };
  WaypointConfiguration_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WaypointConfiguration_descriptor_,
      WaypointConfiguration::default_instance_,
      WaypointConfiguration_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaypointConfiguration, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WaypointConfiguration, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WaypointConfiguration));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_waypoint_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Waypoint_descriptor_, &Waypoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Waypoint_ServiceArea_descriptor_, &Waypoint_ServiceArea::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WaypointConfiguration_descriptor_, &WaypointConfiguration::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_waypoint_2eproto() {
  delete Waypoint::default_instance_;
  delete Waypoint_reflection_;
  delete Waypoint_ServiceArea::default_instance_;
  delete Waypoint_ServiceArea_reflection_;
  delete WaypointConfiguration::default_instance_;
  delete WaypointConfiguration_reflection_;
}

void protobuf_AddDesc_waypoint_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::mission_protobuf::protobuf_AddDesc_task_5faction_2eproto();
  ::mission_protobuf::protobuf_AddDesc_geometry_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016waypoint.proto\022\020mission_protobuf\032\021task"
    "_action.proto\032\016geometry.proto\"\274\002\n\010Waypoi"
    "nt\0226\n\010location\030\001 \002(\0132$.mission_protobuf."
    "LocationIdentifier\022,\n\010geometry\030\002 \002(\0132\032.m"
    "ission_protobuf.Geometry\022<\n\014service_area"
    "\030\003 \001(\0132&.mission_protobuf.Waypoint.Servi"
    "ceArea\022\023\n\013should_scan\030\004 \001(\010\032w\n\013ServiceAr"
    "ea\022\023\n\013description\030\001 \002(\t\022\016\n\006length\030\002 \002(\001\022"
    "\r\n\005width\030\003 \002(\001\022\016\n\006height\030\004 \002(\001\022\020\n\010diamet"
    "er\030\005 \002(\001\022\022\n\ntilt_angle\030\006 \002(\001\"P\n\025Waypoint"
    "Configuration\022\n\n\002id\030\001 \002(\005\022+\n\007wapoint\030\002 \003"
    "(\0132\032.mission_protobuf.WaypointB1\n\037org.mi"
    "ssion_planner.common_msgsB\016WaypointProto"
    "s", 521);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "waypoint.proto", &protobuf_RegisterTypes);
  Waypoint::default_instance_ = new Waypoint();
  Waypoint_ServiceArea::default_instance_ = new Waypoint_ServiceArea();
  WaypointConfiguration::default_instance_ = new WaypointConfiguration();
  Waypoint::default_instance_->InitAsDefaultInstance();
  Waypoint_ServiceArea::default_instance_->InitAsDefaultInstance();
  WaypointConfiguration::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_waypoint_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_waypoint_2eproto {
  StaticDescriptorInitializer_waypoint_2eproto() {
    protobuf_AddDesc_waypoint_2eproto();
  }
} static_descriptor_initializer_waypoint_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Waypoint_ServiceArea::kDescriptionFieldNumber;
const int Waypoint_ServiceArea::kLengthFieldNumber;
const int Waypoint_ServiceArea::kWidthFieldNumber;
const int Waypoint_ServiceArea::kHeightFieldNumber;
const int Waypoint_ServiceArea::kDiameterFieldNumber;
const int Waypoint_ServiceArea::kTiltAngleFieldNumber;
#endif  // !_MSC_VER

Waypoint_ServiceArea::Waypoint_ServiceArea()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mission_protobuf.Waypoint.ServiceArea)
}

void Waypoint_ServiceArea::InitAsDefaultInstance() {
}

Waypoint_ServiceArea::Waypoint_ServiceArea(const Waypoint_ServiceArea& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mission_protobuf.Waypoint.ServiceArea)
}

void Waypoint_ServiceArea::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  length_ = 0;
  width_ = 0;
  height_ = 0;
  diameter_ = 0;
  tilt_angle_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Waypoint_ServiceArea::~Waypoint_ServiceArea() {
  // @@protoc_insertion_point(destructor:mission_protobuf.Waypoint.ServiceArea)
  SharedDtor();
}

void Waypoint_ServiceArea::SharedDtor() {
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete description_;
  }
  if (this != default_instance_) {
  }
}

void Waypoint_ServiceArea::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Waypoint_ServiceArea::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Waypoint_ServiceArea_descriptor_;
}

const Waypoint_ServiceArea& Waypoint_ServiceArea::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_waypoint_2eproto();
  return *default_instance_;
}

Waypoint_ServiceArea* Waypoint_ServiceArea::default_instance_ = NULL;

Waypoint_ServiceArea* Waypoint_ServiceArea::New() const {
  return new Waypoint_ServiceArea;
}

void Waypoint_ServiceArea::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Waypoint_ServiceArea*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(length_, tilt_angle_);
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        description_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Waypoint_ServiceArea::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mission_protobuf.Waypoint.ServiceArea)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string description = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "description");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_length;
        break;
      }

      // required double length = 2;
      case 2: {
        if (tag == 17) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_width;
        break;
      }

      // required double width = 3;
      case 3: {
        if (tag == 25) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_height;
        break;
      }

      // required double height = 4;
      case 4: {
        if (tag == 33) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_diameter;
        break;
      }

      // required double diameter = 5;
      case 5: {
        if (tag == 41) {
         parse_diameter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &diameter_)));
          set_has_diameter();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_tilt_angle;
        break;
      }

      // required double tilt_angle = 6;
      case 6: {
        if (tag == 49) {
         parse_tilt_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tilt_angle_)));
          set_has_tilt_angle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mission_protobuf.Waypoint.ServiceArea)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mission_protobuf.Waypoint.ServiceArea)
  return false;
#undef DO_
}

void Waypoint_ServiceArea::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mission_protobuf.Waypoint.ServiceArea)
  // required string description = 1;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->description(), output);
  }

  // required double length = 2;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->length(), output);
  }

  // required double width = 3;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->width(), output);
  }

  // required double height = 4;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->height(), output);
  }

  // required double diameter = 5;
  if (has_diameter()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->diameter(), output);
  }

  // required double tilt_angle = 6;
  if (has_tilt_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->tilt_angle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mission_protobuf.Waypoint.ServiceArea)
}

::google::protobuf::uint8* Waypoint_ServiceArea::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mission_protobuf.Waypoint.ServiceArea)
  // required string description = 1;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->description(), target);
  }

  // required double length = 2;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->length(), target);
  }

  // required double width = 3;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->width(), target);
  }

  // required double height = 4;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->height(), target);
  }

  // required double diameter = 5;
  if (has_diameter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->diameter(), target);
  }

  // required double tilt_angle = 6;
  if (has_tilt_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->tilt_angle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mission_protobuf.Waypoint.ServiceArea)
  return target;
}

int Waypoint_ServiceArea::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string description = 1;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // required double length = 2;
    if (has_length()) {
      total_size += 1 + 8;
    }

    // required double width = 3;
    if (has_width()) {
      total_size += 1 + 8;
    }

    // required double height = 4;
    if (has_height()) {
      total_size += 1 + 8;
    }

    // required double diameter = 5;
    if (has_diameter()) {
      total_size += 1 + 8;
    }

    // required double tilt_angle = 6;
    if (has_tilt_angle()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Waypoint_ServiceArea::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Waypoint_ServiceArea* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Waypoint_ServiceArea*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Waypoint_ServiceArea::MergeFrom(const Waypoint_ServiceArea& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_diameter()) {
      set_diameter(from.diameter());
    }
    if (from.has_tilt_angle()) {
      set_tilt_angle(from.tilt_angle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Waypoint_ServiceArea::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Waypoint_ServiceArea::CopyFrom(const Waypoint_ServiceArea& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Waypoint_ServiceArea::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void Waypoint_ServiceArea::Swap(Waypoint_ServiceArea* other) {
  if (other != this) {
    std::swap(description_, other->description_);
    std::swap(length_, other->length_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(diameter_, other->diameter_);
    std::swap(tilt_angle_, other->tilt_angle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Waypoint_ServiceArea::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Waypoint_ServiceArea_descriptor_;
  metadata.reflection = Waypoint_ServiceArea_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Waypoint::kLocationFieldNumber;
const int Waypoint::kGeometryFieldNumber;
const int Waypoint::kServiceAreaFieldNumber;
const int Waypoint::kShouldScanFieldNumber;
#endif  // !_MSC_VER

Waypoint::Waypoint()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mission_protobuf.Waypoint)
}

void Waypoint::InitAsDefaultInstance() {
  location_ = const_cast< ::mission_protobuf::LocationIdentifier*>(&::mission_protobuf::LocationIdentifier::default_instance());
  geometry_ = const_cast< ::mission_protobuf::Geometry*>(&::mission_protobuf::Geometry::default_instance());
  service_area_ = const_cast< ::mission_protobuf::Waypoint_ServiceArea*>(&::mission_protobuf::Waypoint_ServiceArea::default_instance());
}

Waypoint::Waypoint(const Waypoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mission_protobuf.Waypoint)
}

void Waypoint::SharedCtor() {
  _cached_size_ = 0;
  location_ = NULL;
  geometry_ = NULL;
  service_area_ = NULL;
  should_scan_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Waypoint::~Waypoint() {
  // @@protoc_insertion_point(destructor:mission_protobuf.Waypoint)
  SharedDtor();
}

void Waypoint::SharedDtor() {
  if (this != default_instance_) {
    delete location_;
    delete geometry_;
    delete service_area_;
  }
}

void Waypoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Waypoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Waypoint_descriptor_;
}

const Waypoint& Waypoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_waypoint_2eproto();
  return *default_instance_;
}

Waypoint* Waypoint::default_instance_ = NULL;

Waypoint* Waypoint::New() const {
  return new Waypoint;
}

void Waypoint::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_location()) {
      if (location_ != NULL) location_->::mission_protobuf::LocationIdentifier::Clear();
    }
    if (has_geometry()) {
      if (geometry_ != NULL) geometry_->::mission_protobuf::Geometry::Clear();
    }
    if (has_service_area()) {
      if (service_area_ != NULL) service_area_->::mission_protobuf::Waypoint_ServiceArea::Clear();
    }
    should_scan_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Waypoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mission_protobuf.Waypoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mission_protobuf.LocationIdentifier location = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_geometry;
        break;
      }

      // required .mission_protobuf.Geometry geometry = 2;
      case 2: {
        if (tag == 18) {
         parse_geometry:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_geometry()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_service_area;
        break;
      }

      // optional .mission_protobuf.Waypoint.ServiceArea service_area = 3;
      case 3: {
        if (tag == 26) {
         parse_service_area:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_service_area()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_should_scan;
        break;
      }

      // optional bool should_scan = 4;
      case 4: {
        if (tag == 32) {
         parse_should_scan:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &should_scan_)));
          set_has_should_scan();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mission_protobuf.Waypoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mission_protobuf.Waypoint)
  return false;
#undef DO_
}

void Waypoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mission_protobuf.Waypoint)
  // required .mission_protobuf.LocationIdentifier location = 1;
  if (has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->location(), output);
  }

  // required .mission_protobuf.Geometry geometry = 2;
  if (has_geometry()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->geometry(), output);
  }

  // optional .mission_protobuf.Waypoint.ServiceArea service_area = 3;
  if (has_service_area()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->service_area(), output);
  }

  // optional bool should_scan = 4;
  if (has_should_scan()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->should_scan(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mission_protobuf.Waypoint)
}

::google::protobuf::uint8* Waypoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mission_protobuf.Waypoint)
  // required .mission_protobuf.LocationIdentifier location = 1;
  if (has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->location(), target);
  }

  // required .mission_protobuf.Geometry geometry = 2;
  if (has_geometry()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->geometry(), target);
  }

  // optional .mission_protobuf.Waypoint.ServiceArea service_area = 3;
  if (has_service_area()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->service_area(), target);
  }

  // optional bool should_scan = 4;
  if (has_should_scan()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->should_scan(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mission_protobuf.Waypoint)
  return target;
}

int Waypoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .mission_protobuf.LocationIdentifier location = 1;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->location());
    }

    // required .mission_protobuf.Geometry geometry = 2;
    if (has_geometry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->geometry());
    }

    // optional .mission_protobuf.Waypoint.ServiceArea service_area = 3;
    if (has_service_area()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->service_area());
    }

    // optional bool should_scan = 4;
    if (has_should_scan()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Waypoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Waypoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Waypoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Waypoint::MergeFrom(const Waypoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_location()) {
      mutable_location()->::mission_protobuf::LocationIdentifier::MergeFrom(from.location());
    }
    if (from.has_geometry()) {
      mutable_geometry()->::mission_protobuf::Geometry::MergeFrom(from.geometry());
    }
    if (from.has_service_area()) {
      mutable_service_area()->::mission_protobuf::Waypoint_ServiceArea::MergeFrom(from.service_area());
    }
    if (from.has_should_scan()) {
      set_should_scan(from.should_scan());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Waypoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Waypoint::CopyFrom(const Waypoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Waypoint::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_location()) {
    if (!this->location().IsInitialized()) return false;
  }
  if (has_geometry()) {
    if (!this->geometry().IsInitialized()) return false;
  }
  if (has_service_area()) {
    if (!this->service_area().IsInitialized()) return false;
  }
  return true;
}

void Waypoint::Swap(Waypoint* other) {
  if (other != this) {
    std::swap(location_, other->location_);
    std::swap(geometry_, other->geometry_);
    std::swap(service_area_, other->service_area_);
    std::swap(should_scan_, other->should_scan_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Waypoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Waypoint_descriptor_;
  metadata.reflection = Waypoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WaypointConfiguration::kIdFieldNumber;
const int WaypointConfiguration::kWapointFieldNumber;
#endif  // !_MSC_VER

WaypointConfiguration::WaypointConfiguration()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mission_protobuf.WaypointConfiguration)
}

void WaypointConfiguration::InitAsDefaultInstance() {
}

WaypointConfiguration::WaypointConfiguration(const WaypointConfiguration& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mission_protobuf.WaypointConfiguration)
}

void WaypointConfiguration::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WaypointConfiguration::~WaypointConfiguration() {
  // @@protoc_insertion_point(destructor:mission_protobuf.WaypointConfiguration)
  SharedDtor();
}

void WaypointConfiguration::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WaypointConfiguration::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WaypointConfiguration::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WaypointConfiguration_descriptor_;
}

const WaypointConfiguration& WaypointConfiguration::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_waypoint_2eproto();
  return *default_instance_;
}

WaypointConfiguration* WaypointConfiguration::default_instance_ = NULL;

WaypointConfiguration* WaypointConfiguration::New() const {
  return new WaypointConfiguration;
}

void WaypointConfiguration::Clear() {
  id_ = 0;
  wapoint_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WaypointConfiguration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mission_protobuf.WaypointConfiguration)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_wapoint;
        break;
      }

      // repeated .mission_protobuf.Waypoint wapoint = 2;
      case 2: {
        if (tag == 18) {
         parse_wapoint:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_wapoint()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_wapoint;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mission_protobuf.WaypointConfiguration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mission_protobuf.WaypointConfiguration)
  return false;
#undef DO_
}

void WaypointConfiguration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mission_protobuf.WaypointConfiguration)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // repeated .mission_protobuf.Waypoint wapoint = 2;
  for (int i = 0; i < this->wapoint_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->wapoint(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mission_protobuf.WaypointConfiguration)
}

::google::protobuf::uint8* WaypointConfiguration::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mission_protobuf.WaypointConfiguration)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // repeated .mission_protobuf.Waypoint wapoint = 2;
  for (int i = 0; i < this->wapoint_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->wapoint(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mission_protobuf.WaypointConfiguration)
  return target;
}

int WaypointConfiguration::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  // repeated .mission_protobuf.Waypoint wapoint = 2;
  total_size += 1 * this->wapoint_size();
  for (int i = 0; i < this->wapoint_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->wapoint(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WaypointConfiguration::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WaypointConfiguration* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WaypointConfiguration*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WaypointConfiguration::MergeFrom(const WaypointConfiguration& from) {
  GOOGLE_CHECK_NE(&from, this);
  wapoint_.MergeFrom(from.wapoint_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WaypointConfiguration::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WaypointConfiguration::CopyFrom(const WaypointConfiguration& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WaypointConfiguration::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->wapoint())) return false;
  return true;
}

void WaypointConfiguration::Swap(WaypointConfiguration* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    wapoint_.Swap(&other->wapoint_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WaypointConfiguration::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WaypointConfiguration_descriptor_;
  metadata.reflection = WaypointConfiguration_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace mission_protobuf

// @@protoc_insertion_point(global_scope)
