// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: task_specification.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "task_specification.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mission_protobuf {

namespace {

const ::google::protobuf::Descriptor* NavigationTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NavigationTask_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NavigationTask_Orientation_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TransportationTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransportationTask_reflection_ = NULL;
const ::google::protobuf::Descriptor* Task_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Task_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Task_Status_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Task_TaskType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_task_5fspecification_2eproto() {
  protobuf_AddDesc_task_5fspecification_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "task_specification.proto");
  GOOGLE_CHECK(file != NULL);
  NavigationTask_descriptor_ = file->message_type(0);
  static const int NavigationTask_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NavigationTask, location_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NavigationTask, orientation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NavigationTask, wait_time_),
  };
  NavigationTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NavigationTask_descriptor_,
      NavigationTask::default_instance_,
      NavigationTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NavigationTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NavigationTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NavigationTask));
  NavigationTask_Orientation_descriptor_ = NavigationTask_descriptor_->enum_type(0);
  TransportationTask_descriptor_ = file->message_type(1);
  static const int TransportationTask_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportationTask, object_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportationTask, container_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportationTask, quantity_delivered_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportationTask, quantity_requested_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportationTask, destination_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportationTask, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportationTask, processing_team_),
  };
  TransportationTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransportationTask_descriptor_,
      TransportationTask::default_instance_,
      TransportationTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportationTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransportationTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransportationTask));
  Task_descriptor_ = file->message_type(2);
  static const int Task_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, transportation_task_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, navigation_task_),
  };
  Task_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Task_descriptor_,
      Task::default_instance_,
      Task_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Task));
  Task_Status_descriptor_ = Task_descriptor_->enum_type(0);
  Task_TaskType_descriptor_ = Task_descriptor_->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_task_5fspecification_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NavigationTask_descriptor_, &NavigationTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransportationTask_descriptor_, &TransportationTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Task_descriptor_, &Task::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_task_5fspecification_2eproto() {
  delete NavigationTask::default_instance_;
  delete NavigationTask_reflection_;
  delete TransportationTask::default_instance_;
  delete TransportationTask_reflection_;
  delete Task::default_instance_;
  delete Task_reflection_;
}

void protobuf_AddDesc_task_5fspecification_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::mission_protobuf::protobuf_AddDesc_task_5faction_2eproto();
  ::mission_protobuf::protobuf_AddDesc_time_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030task_specification.proto\022\020mission_prot"
    "obuf\032\021task_action.proto\032\ntime.proto\"\357\001\n\016"
    "NavigationTask\0226\n\010location\030\001 \002(\0132$.missi"
    "on_protobuf.LocationIdentifier\022A\n\013orient"
    "ation\030\002 \002(\0162,.mission_protobuf.Navigatio"
    "nTask.Orientation\022)\n\twait_time\030\003 \002(\0132\026.m"
    "ission_protobuf.Time\"7\n\013Orientation\022\t\n\005N"
    "ORTH\020\001\022\010\n\004EAST\020\002\022\t\n\005SOUTH\020\003\022\010\n\004WEST\020\004\"\301\002"
    "\n\022TransportationTask\0222\n\006object\030\001 \002(\0132\".m"
    "ission_protobuf.ObjectIdentifier\0225\n\tcont"
    "ainer\030\002 \001(\0132\".mission_protobuf.ObjectIde"
    "ntifier\022\032\n\022quantity_delivered\030\003 \002(\004\022\032\n\022q"
    "uantity_requested\030\004 \001(\004\0229\n\013destination\030\005"
    " \001(\0132$.mission_protobuf.LocationIdentifi"
    "er\0224\n\006source\030\006 \001(\0132$.mission_protobuf.Lo"
    "cationIdentifier\022\027\n\017processing_team\030\007 \001("
    "\t\"\207\003\n\004Task\022\n\n\002id\030\001 \002(\004\022-\n\004type\030\002 \002(\0162\037.m"
    "ission_protobuf.Task.TaskType\022-\n\006status\030"
    "\003 \002(\0162\035.mission_protobuf.Task.Status\022A\n\023"
    "transportation_task\030\004 \001(\0132$.mission_prot"
    "obuf.TransportationTask\0229\n\017navigation_ta"
    "sk\030\005 \001(\0132 .mission_protobuf.NavigationTa"
    "sk\"Z\n\006Status\022\013\n\007OFFERED\020\001\022\013\n\007TIMEOUT\020\002\022\017"
    "\n\013IN_PROGRESS\020\003\022\n\n\006PAUSED\020\004\022\013\n\007ABORTED\020\005"
    "\022\014\n\010FINISHED\020\006\";\n\010TaskType\022\013\n\007UNKNOWN\020\000\022"
    "\022\n\016TRANSPORTATION\020\001\022\016\n\nNAVIGATION\020\002B-\n\037o"
    "rg.mission_planner.common_msgsB\nTaskProt"
    "os", 1082);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "task_specification.proto", &protobuf_RegisterTypes);
  NavigationTask::default_instance_ = new NavigationTask();
  TransportationTask::default_instance_ = new TransportationTask();
  Task::default_instance_ = new Task();
  NavigationTask::default_instance_->InitAsDefaultInstance();
  TransportationTask::default_instance_->InitAsDefaultInstance();
  Task::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_task_5fspecification_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_task_5fspecification_2eproto {
  StaticDescriptorInitializer_task_5fspecification_2eproto() {
    protobuf_AddDesc_task_5fspecification_2eproto();
  }
} static_descriptor_initializer_task_5fspecification_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* NavigationTask_Orientation_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NavigationTask_Orientation_descriptor_;
}
bool NavigationTask_Orientation_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const NavigationTask_Orientation NavigationTask::NORTH;
const NavigationTask_Orientation NavigationTask::EAST;
const NavigationTask_Orientation NavigationTask::SOUTH;
const NavigationTask_Orientation NavigationTask::WEST;
const NavigationTask_Orientation NavigationTask::Orientation_MIN;
const NavigationTask_Orientation NavigationTask::Orientation_MAX;
const int NavigationTask::Orientation_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int NavigationTask::kLocationFieldNumber;
const int NavigationTask::kOrientationFieldNumber;
const int NavigationTask::kWaitTimeFieldNumber;
#endif  // !_MSC_VER

NavigationTask::NavigationTask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mission_protobuf.NavigationTask)
}

void NavigationTask::InitAsDefaultInstance() {
  location_ = const_cast< ::mission_protobuf::LocationIdentifier*>(&::mission_protobuf::LocationIdentifier::default_instance());
  wait_time_ = const_cast< ::mission_protobuf::Time*>(&::mission_protobuf::Time::default_instance());
}

NavigationTask::NavigationTask(const NavigationTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mission_protobuf.NavigationTask)
}

void NavigationTask::SharedCtor() {
  _cached_size_ = 0;
  location_ = NULL;
  orientation_ = 1;
  wait_time_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NavigationTask::~NavigationTask() {
  // @@protoc_insertion_point(destructor:mission_protobuf.NavigationTask)
  SharedDtor();
}

void NavigationTask::SharedDtor() {
  if (this != default_instance_) {
    delete location_;
    delete wait_time_;
  }
}

void NavigationTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NavigationTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NavigationTask_descriptor_;
}

const NavigationTask& NavigationTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_5fspecification_2eproto();
  return *default_instance_;
}

NavigationTask* NavigationTask::default_instance_ = NULL;

NavigationTask* NavigationTask::New() const {
  return new NavigationTask;
}

void NavigationTask::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_location()) {
      if (location_ != NULL) location_->::mission_protobuf::LocationIdentifier::Clear();
    }
    orientation_ = 1;
    if (has_wait_time()) {
      if (wait_time_ != NULL) wait_time_->::mission_protobuf::Time::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NavigationTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mission_protobuf.NavigationTask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mission_protobuf.LocationIdentifier location = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_orientation;
        break;
      }

      // required .mission_protobuf.NavigationTask.Orientation orientation = 2;
      case 2: {
        if (tag == 16) {
         parse_orientation:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mission_protobuf::NavigationTask_Orientation_IsValid(value)) {
            set_orientation(static_cast< ::mission_protobuf::NavigationTask_Orientation >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_wait_time;
        break;
      }

      // required .mission_protobuf.Time wait_time = 3;
      case 3: {
        if (tag == 26) {
         parse_wait_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wait_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mission_protobuf.NavigationTask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mission_protobuf.NavigationTask)
  return false;
#undef DO_
}

void NavigationTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mission_protobuf.NavigationTask)
  // required .mission_protobuf.LocationIdentifier location = 1;
  if (has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->location(), output);
  }

  // required .mission_protobuf.NavigationTask.Orientation orientation = 2;
  if (has_orientation()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->orientation(), output);
  }

  // required .mission_protobuf.Time wait_time = 3;
  if (has_wait_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->wait_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mission_protobuf.NavigationTask)
}

::google::protobuf::uint8* NavigationTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mission_protobuf.NavigationTask)
  // required .mission_protobuf.LocationIdentifier location = 1;
  if (has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->location(), target);
  }

  // required .mission_protobuf.NavigationTask.Orientation orientation = 2;
  if (has_orientation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->orientation(), target);
  }

  // required .mission_protobuf.Time wait_time = 3;
  if (has_wait_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->wait_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mission_protobuf.NavigationTask)
  return target;
}

int NavigationTask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .mission_protobuf.LocationIdentifier location = 1;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->location());
    }

    // required .mission_protobuf.NavigationTask.Orientation orientation = 2;
    if (has_orientation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->orientation());
    }

    // required .mission_protobuf.Time wait_time = 3;
    if (has_wait_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->wait_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NavigationTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NavigationTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NavigationTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NavigationTask::MergeFrom(const NavigationTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_location()) {
      mutable_location()->::mission_protobuf::LocationIdentifier::MergeFrom(from.location());
    }
    if (from.has_orientation()) {
      set_orientation(from.orientation());
    }
    if (from.has_wait_time()) {
      mutable_wait_time()->::mission_protobuf::Time::MergeFrom(from.wait_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NavigationTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NavigationTask::CopyFrom(const NavigationTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NavigationTask::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_location()) {
    if (!this->location().IsInitialized()) return false;
  }
  if (has_wait_time()) {
    if (!this->wait_time().IsInitialized()) return false;
  }
  return true;
}

void NavigationTask::Swap(NavigationTask* other) {
  if (other != this) {
    std::swap(location_, other->location_);
    std::swap(orientation_, other->orientation_);
    std::swap(wait_time_, other->wait_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NavigationTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NavigationTask_descriptor_;
  metadata.reflection = NavigationTask_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TransportationTask::kObjectFieldNumber;
const int TransportationTask::kContainerFieldNumber;
const int TransportationTask::kQuantityDeliveredFieldNumber;
const int TransportationTask::kQuantityRequestedFieldNumber;
const int TransportationTask::kDestinationFieldNumber;
const int TransportationTask::kSourceFieldNumber;
const int TransportationTask::kProcessingTeamFieldNumber;
#endif  // !_MSC_VER

TransportationTask::TransportationTask()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mission_protobuf.TransportationTask)
}

void TransportationTask::InitAsDefaultInstance() {
  object_ = const_cast< ::mission_protobuf::ObjectIdentifier*>(&::mission_protobuf::ObjectIdentifier::default_instance());
  container_ = const_cast< ::mission_protobuf::ObjectIdentifier*>(&::mission_protobuf::ObjectIdentifier::default_instance());
  destination_ = const_cast< ::mission_protobuf::LocationIdentifier*>(&::mission_protobuf::LocationIdentifier::default_instance());
  source_ = const_cast< ::mission_protobuf::LocationIdentifier*>(&::mission_protobuf::LocationIdentifier::default_instance());
}

TransportationTask::TransportationTask(const TransportationTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mission_protobuf.TransportationTask)
}

void TransportationTask::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  object_ = NULL;
  container_ = NULL;
  quantity_delivered_ = GOOGLE_ULONGLONG(0);
  quantity_requested_ = GOOGLE_ULONGLONG(0);
  destination_ = NULL;
  source_ = NULL;
  processing_team_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransportationTask::~TransportationTask() {
  // @@protoc_insertion_point(destructor:mission_protobuf.TransportationTask)
  SharedDtor();
}

void TransportationTask::SharedDtor() {
  if (processing_team_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete processing_team_;
  }
  if (this != default_instance_) {
    delete object_;
    delete container_;
    delete destination_;
    delete source_;
  }
}

void TransportationTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransportationTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransportationTask_descriptor_;
}

const TransportationTask& TransportationTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_5fspecification_2eproto();
  return *default_instance_;
}

TransportationTask* TransportationTask::default_instance_ = NULL;

TransportationTask* TransportationTask::New() const {
  return new TransportationTask;
}

void TransportationTask::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TransportationTask*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(quantity_delivered_, quantity_requested_);
    if (has_object()) {
      if (object_ != NULL) object_->::mission_protobuf::ObjectIdentifier::Clear();
    }
    if (has_container()) {
      if (container_ != NULL) container_->::mission_protobuf::ObjectIdentifier::Clear();
    }
    if (has_destination()) {
      if (destination_ != NULL) destination_->::mission_protobuf::LocationIdentifier::Clear();
    }
    if (has_source()) {
      if (source_ != NULL) source_->::mission_protobuf::LocationIdentifier::Clear();
    }
    if (has_processing_team()) {
      if (processing_team_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        processing_team_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransportationTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mission_protobuf.TransportationTask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mission_protobuf.ObjectIdentifier object = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_object()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_container;
        break;
      }

      // optional .mission_protobuf.ObjectIdentifier container = 2;
      case 2: {
        if (tag == 18) {
         parse_container:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_container()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_quantity_delivered;
        break;
      }

      // required uint64 quantity_delivered = 3;
      case 3: {
        if (tag == 24) {
         parse_quantity_delivered:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &quantity_delivered_)));
          set_has_quantity_delivered();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_quantity_requested;
        break;
      }

      // optional uint64 quantity_requested = 4;
      case 4: {
        if (tag == 32) {
         parse_quantity_requested:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &quantity_requested_)));
          set_has_quantity_requested();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_destination;
        break;
      }

      // optional .mission_protobuf.LocationIdentifier destination = 5;
      case 5: {
        if (tag == 42) {
         parse_destination:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_destination()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_source;
        break;
      }

      // optional .mission_protobuf.LocationIdentifier source = 6;
      case 6: {
        if (tag == 50) {
         parse_source:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_source()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_processing_team;
        break;
      }

      // optional string processing_team = 7;
      case 7: {
        if (tag == 58) {
         parse_processing_team:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_processing_team()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->processing_team().data(), this->processing_team().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "processing_team");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mission_protobuf.TransportationTask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mission_protobuf.TransportationTask)
  return false;
#undef DO_
}

void TransportationTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mission_protobuf.TransportationTask)
  // required .mission_protobuf.ObjectIdentifier object = 1;
  if (has_object()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->object(), output);
  }

  // optional .mission_protobuf.ObjectIdentifier container = 2;
  if (has_container()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->container(), output);
  }

  // required uint64 quantity_delivered = 3;
  if (has_quantity_delivered()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->quantity_delivered(), output);
  }

  // optional uint64 quantity_requested = 4;
  if (has_quantity_requested()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->quantity_requested(), output);
  }

  // optional .mission_protobuf.LocationIdentifier destination = 5;
  if (has_destination()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->destination(), output);
  }

  // optional .mission_protobuf.LocationIdentifier source = 6;
  if (has_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->source(), output);
  }

  // optional string processing_team = 7;
  if (has_processing_team()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->processing_team().data(), this->processing_team().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "processing_team");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->processing_team(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mission_protobuf.TransportationTask)
}

::google::protobuf::uint8* TransportationTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mission_protobuf.TransportationTask)
  // required .mission_protobuf.ObjectIdentifier object = 1;
  if (has_object()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->object(), target);
  }

  // optional .mission_protobuf.ObjectIdentifier container = 2;
  if (has_container()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->container(), target);
  }

  // required uint64 quantity_delivered = 3;
  if (has_quantity_delivered()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->quantity_delivered(), target);
  }

  // optional uint64 quantity_requested = 4;
  if (has_quantity_requested()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->quantity_requested(), target);
  }

  // optional .mission_protobuf.LocationIdentifier destination = 5;
  if (has_destination()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->destination(), target);
  }

  // optional .mission_protobuf.LocationIdentifier source = 6;
  if (has_source()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->source(), target);
  }

  // optional string processing_team = 7;
  if (has_processing_team()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->processing_team().data(), this->processing_team().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "processing_team");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->processing_team(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mission_protobuf.TransportationTask)
  return target;
}

int TransportationTask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .mission_protobuf.ObjectIdentifier object = 1;
    if (has_object()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->object());
    }

    // optional .mission_protobuf.ObjectIdentifier container = 2;
    if (has_container()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->container());
    }

    // required uint64 quantity_delivered = 3;
    if (has_quantity_delivered()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->quantity_delivered());
    }

    // optional uint64 quantity_requested = 4;
    if (has_quantity_requested()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->quantity_requested());
    }

    // optional .mission_protobuf.LocationIdentifier destination = 5;
    if (has_destination()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->destination());
    }

    // optional .mission_protobuf.LocationIdentifier source = 6;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->source());
    }

    // optional string processing_team = 7;
    if (has_processing_team()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->processing_team());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransportationTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransportationTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransportationTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransportationTask::MergeFrom(const TransportationTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_object()) {
      mutable_object()->::mission_protobuf::ObjectIdentifier::MergeFrom(from.object());
    }
    if (from.has_container()) {
      mutable_container()->::mission_protobuf::ObjectIdentifier::MergeFrom(from.container());
    }
    if (from.has_quantity_delivered()) {
      set_quantity_delivered(from.quantity_delivered());
    }
    if (from.has_quantity_requested()) {
      set_quantity_requested(from.quantity_requested());
    }
    if (from.has_destination()) {
      mutable_destination()->::mission_protobuf::LocationIdentifier::MergeFrom(from.destination());
    }
    if (from.has_source()) {
      mutable_source()->::mission_protobuf::LocationIdentifier::MergeFrom(from.source());
    }
    if (from.has_processing_team()) {
      set_processing_team(from.processing_team());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransportationTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransportationTask::CopyFrom(const TransportationTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransportationTask::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  if (has_object()) {
    if (!this->object().IsInitialized()) return false;
  }
  if (has_container()) {
    if (!this->container().IsInitialized()) return false;
  }
  if (has_destination()) {
    if (!this->destination().IsInitialized()) return false;
  }
  if (has_source()) {
    if (!this->source().IsInitialized()) return false;
  }
  return true;
}

void TransportationTask::Swap(TransportationTask* other) {
  if (other != this) {
    std::swap(object_, other->object_);
    std::swap(container_, other->container_);
    std::swap(quantity_delivered_, other->quantity_delivered_);
    std::swap(quantity_requested_, other->quantity_requested_);
    std::swap(destination_, other->destination_);
    std::swap(source_, other->source_);
    std::swap(processing_team_, other->processing_team_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransportationTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransportationTask_descriptor_;
  metadata.reflection = TransportationTask_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Task_Status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Task_Status_descriptor_;
}
bool Task_Status_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Task_Status Task::OFFERED;
const Task_Status Task::TIMEOUT;
const Task_Status Task::IN_PROGRESS;
const Task_Status Task::PAUSED;
const Task_Status Task::ABORTED;
const Task_Status Task::FINISHED;
const Task_Status Task::Status_MIN;
const Task_Status Task::Status_MAX;
const int Task::Status_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Task_TaskType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Task_TaskType_descriptor_;
}
bool Task_TaskType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Task_TaskType Task::UNKNOWN;
const Task_TaskType Task::TRANSPORTATION;
const Task_TaskType Task::NAVIGATION;
const Task_TaskType Task::TaskType_MIN;
const Task_TaskType Task::TaskType_MAX;
const int Task::TaskType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Task::kIdFieldNumber;
const int Task::kTypeFieldNumber;
const int Task::kStatusFieldNumber;
const int Task::kTransportationTaskFieldNumber;
const int Task::kNavigationTaskFieldNumber;
#endif  // !_MSC_VER

Task::Task()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mission_protobuf.Task)
}

void Task::InitAsDefaultInstance() {
  transportation_task_ = const_cast< ::mission_protobuf::TransportationTask*>(&::mission_protobuf::TransportationTask::default_instance());
  navigation_task_ = const_cast< ::mission_protobuf::NavigationTask*>(&::mission_protobuf::NavigationTask::default_instance());
}

Task::Task(const Task& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mission_protobuf.Task)
}

void Task::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  type_ = 0;
  status_ = 1;
  transportation_task_ = NULL;
  navigation_task_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Task::~Task() {
  // @@protoc_insertion_point(destructor:mission_protobuf.Task)
  SharedDtor();
}

void Task::SharedDtor() {
  if (this != default_instance_) {
    delete transportation_task_;
    delete navigation_task_;
  }
}

void Task::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Task::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Task_descriptor_;
}

const Task& Task::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_5fspecification_2eproto();
  return *default_instance_;
}

Task* Task::default_instance_ = NULL;

Task* Task::New() const {
  return new Task;
}

void Task::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Task*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(id_, type_);
    status_ = 1;
    if (has_transportation_task()) {
      if (transportation_task_ != NULL) transportation_task_->::mission_protobuf::TransportationTask::Clear();
    }
    if (has_navigation_task()) {
      if (navigation_task_ != NULL) navigation_task_->::mission_protobuf::NavigationTask::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Task::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mission_protobuf.Task)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required .mission_protobuf.Task.TaskType type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mission_protobuf::Task_TaskType_IsValid(value)) {
            set_type(static_cast< ::mission_protobuf::Task_TaskType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // required .mission_protobuf.Task.Status status = 3;
      case 3: {
        if (tag == 24) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mission_protobuf::Task_Status_IsValid(value)) {
            set_status(static_cast< ::mission_protobuf::Task_Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_transportation_task;
        break;
      }

      // optional .mission_protobuf.TransportationTask transportation_task = 4;
      case 4: {
        if (tag == 34) {
         parse_transportation_task:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_transportation_task()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_navigation_task;
        break;
      }

      // optional .mission_protobuf.NavigationTask navigation_task = 5;
      case 5: {
        if (tag == 42) {
         parse_navigation_task:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_navigation_task()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mission_protobuf.Task)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mission_protobuf.Task)
  return false;
#undef DO_
}

void Task::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mission_protobuf.Task)
  // required uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // required .mission_protobuf.Task.TaskType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // required .mission_protobuf.Task.Status status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

  // optional .mission_protobuf.TransportationTask transportation_task = 4;
  if (has_transportation_task()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->transportation_task(), output);
  }

  // optional .mission_protobuf.NavigationTask navigation_task = 5;
  if (has_navigation_task()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->navigation_task(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mission_protobuf.Task)
}

::google::protobuf::uint8* Task::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mission_protobuf.Task)
  // required uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // required .mission_protobuf.Task.TaskType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // required .mission_protobuf.Task.Status status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->status(), target);
  }

  // optional .mission_protobuf.TransportationTask transportation_task = 4;
  if (has_transportation_task()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->transportation_task(), target);
  }

  // optional .mission_protobuf.NavigationTask navigation_task = 5;
  if (has_navigation_task()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->navigation_task(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mission_protobuf.Task)
  return target;
}

int Task::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // required .mission_protobuf.Task.TaskType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required .mission_protobuf.Task.Status status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional .mission_protobuf.TransportationTask transportation_task = 4;
    if (has_transportation_task()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->transportation_task());
    }

    // optional .mission_protobuf.NavigationTask navigation_task = 5;
    if (has_navigation_task()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->navigation_task());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Task::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Task* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Task*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Task::MergeFrom(const Task& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_transportation_task()) {
      mutable_transportation_task()->::mission_protobuf::TransportationTask::MergeFrom(from.transportation_task());
    }
    if (from.has_navigation_task()) {
      mutable_navigation_task()->::mission_protobuf::NavigationTask::MergeFrom(from.navigation_task());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Task::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Task::CopyFrom(const Task& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Task::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_transportation_task()) {
    if (!this->transportation_task().IsInitialized()) return false;
  }
  if (has_navigation_task()) {
    if (!this->navigation_task().IsInitialized()) return false;
  }
  return true;
}

void Task::Swap(Task* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(status_, other->status_);
    std::swap(transportation_task_, other->transportation_task_);
    std::swap(navigation_task_, other->navigation_task_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Task::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Task_descriptor_;
  metadata.reflection = Task_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace mission_protobuf

// @@protoc_insertion_point(global_scope)
