// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: task_action.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "task_action.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mission_protobuf {

namespace {

const ::google::protobuf::Descriptor* ObjectIdentifier_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectIdentifier_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ObjectIdentifier_ObjectType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ObjectConfiguration_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ObjectConfiguration_reflection_ = NULL;
const ::google::protobuf::Descriptor* LocationIdentifier_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LocationIdentifier_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LocationIdentifier_LocationType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Inventory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Inventory_reflection_ = NULL;
const ::google::protobuf::Descriptor* Inventory_Item_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Inventory_Item_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Inventory_Item_CompType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* Inventory_CompType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Transaction_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Transaction_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Transaction_Action_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TransactionLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TransactionLog_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TransactionLog_CompType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_task_5faction_2eproto() {
  protobuf_AddDesc_task_5faction_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "task_action.proto");
  GOOGLE_CHECK(file != NULL);
  ObjectIdentifier_descriptor_ = file->message_type(0);
  static const int ObjectIdentifier_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectIdentifier, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectIdentifier, type_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectIdentifier, instance_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectIdentifier, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectIdentifier, image_description_),
  };
  ObjectIdentifier_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ObjectIdentifier_descriptor_,
      ObjectIdentifier::default_instance_,
      ObjectIdentifier_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectIdentifier, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectIdentifier, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ObjectIdentifier));
  ObjectIdentifier_ObjectType_descriptor_ = ObjectIdentifier_descriptor_->enum_type(0);
  ObjectConfiguration_descriptor_ = file->message_type(1);
  static const int ObjectConfiguration_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectConfiguration, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectConfiguration, object_),
  };
  ObjectConfiguration_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ObjectConfiguration_descriptor_,
      ObjectConfiguration::default_instance_,
      ObjectConfiguration_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectConfiguration, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ObjectConfiguration, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ObjectConfiguration));
  LocationIdentifier_descriptor_ = file->message_type(2);
  static const int LocationIdentifier_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocationIdentifier, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocationIdentifier, instance_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocationIdentifier, description_),
  };
  LocationIdentifier_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LocationIdentifier_descriptor_,
      LocationIdentifier::default_instance_,
      LocationIdentifier_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocationIdentifier, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LocationIdentifier, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LocationIdentifier));
  LocationIdentifier_LocationType_descriptor_ = LocationIdentifier_descriptor_->enum_type(0);
  Inventory_descriptor_ = file->message_type(3);
  static const int Inventory_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Inventory, items_),
  };
  Inventory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Inventory_descriptor_,
      Inventory::default_instance_,
      Inventory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Inventory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Inventory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Inventory));
  Inventory_Item_descriptor_ = Inventory_descriptor_->nested_type(0);
  static const int Inventory_Item_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Inventory_Item, object_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Inventory_Item, quantity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Inventory_Item, container_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Inventory_Item, location_),
  };
  Inventory_Item_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Inventory_Item_descriptor_,
      Inventory_Item::default_instance_,
      Inventory_Item_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Inventory_Item, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Inventory_Item, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Inventory_Item));
  Inventory_Item_CompType_descriptor_ = Inventory_Item_descriptor_->enum_type(0);
  Inventory_CompType_descriptor_ = Inventory_descriptor_->enum_type(0);
  Transaction_descriptor_ = file->message_type(4);
  static const int Transaction_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, transaction_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, order_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, object_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, quantity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, destination_),
  };
  Transaction_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Transaction_descriptor_,
      Transaction::default_instance_,
      Transaction_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Transaction, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Transaction));
  Transaction_Action_descriptor_ = Transaction_descriptor_->enum_type(0);
  TransactionLog_descriptor_ = file->message_type(5);
  static const int TransactionLog_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionLog, transactions_),
  };
  TransactionLog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TransactionLog_descriptor_,
      TransactionLog::default_instance_,
      TransactionLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionLog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TransactionLog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TransactionLog));
  TransactionLog_CompType_descriptor_ = TransactionLog_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_task_5faction_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ObjectIdentifier_descriptor_, &ObjectIdentifier::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ObjectConfiguration_descriptor_, &ObjectConfiguration::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LocationIdentifier_descriptor_, &LocationIdentifier::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Inventory_descriptor_, &Inventory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Inventory_Item_descriptor_, &Inventory_Item::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Transaction_descriptor_, &Transaction::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TransactionLog_descriptor_, &TransactionLog::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_task_5faction_2eproto() {
  delete ObjectIdentifier::default_instance_;
  delete ObjectIdentifier_reflection_;
  delete ObjectConfiguration::default_instance_;
  delete ObjectConfiguration_reflection_;
  delete LocationIdentifier::default_instance_;
  delete LocationIdentifier_reflection_;
  delete Inventory::default_instance_;
  delete Inventory_reflection_;
  delete Inventory_Item::default_instance_;
  delete Inventory_Item_reflection_;
  delete Transaction::default_instance_;
  delete Transaction_reflection_;
  delete TransactionLog::default_instance_;
  delete TransactionLog_reflection_;
}

void protobuf_AddDesc_task_5faction_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021task_action.proto\022\020mission_protobuf\"\337\007"
    "\n\020ObjectIdentifier\022;\n\004type\030\001 \002(\0162-.missi"
    "on_protobuf.ObjectIdentifier.ObjectType\022"
    "\017\n\007type_id\030\002 \001(\003\022\023\n\013instance_id\030\003 \001(\003\022\023\n"
    "\013description\030\004 \001(\t\022\031\n\021image_description\030"
    "\005 \001(\t\"\267\006\n\nObjectType\022\014\n\010F20_20_B\020\001\022\014\n\010F2"
    "0_20_G\020\002\022\014\n\010S40_40_B\020\003\022\014\n\010S40_40_G\020\004\022\013\n\007"
    "M20_100\020\005\022\007\n\003M20\020\006\022\007\n\003M30\020\007\022\007\n\003R20\020\010\022\017\n\013"
    "BEARING_BOX\020\t\022\013\n\007BEARING\020\n\022\010\n\004AXIS\020\013\022\021\n\r"
    "DISTANCE_TUBE\020\014\022\t\n\005MOTOR\020\r\022\017\n\013CONTAINER_"
    "B\020\016\022\017\n\013CONTAINER_R\020\017\022\026\n\022PICKUP_BLACK_WHI"
    "TE\020\020\022\025\n\021PICKUP_CHOCO_MILK\020\021\022\017\n\013DUPLO_WHI"
    "TE\020\022\022\021\n\rDUPLO_CLASSIC\020\023\022\024\n\020TWIX_SPEKULAT"
    "IUS\020\024\022\016\n\nTWIX_WHITE\020\025\022\020\n\014TWIX_CLASSIC\020\026\022"
    "\r\n\tTWIX_MINI\020\027\022\010\n\004MARS\020\030\022\r\n\tMARS_MINI\020\031\022"
    "\014\n\010SNICKERS\020\032\022\021\n\rSNICKERS_MINI\020\033\022\022\n\016KITK"
    "AT_CLASSIC\020\034\022\020\n\014KITKAT_WHITE\020\035\022\027\n\023KITKAT"
    "_CHUNKY_WHITE\020\036\022\031\n\025KITKAT_CHUNKY_CLASSIC"
    "\020\037\022\017\n\013KITKAT_MINI\020 \022\020\n\014LION_CLASSIC\020!\022\r\n"
    "\tLION_MINI\020\"\022\016\n\nM_M_CRIPSY\020#\022\016\n\nM_M_PEAN"
    "UT\020$\022\n\n\006BOUNTY\020%\022\017\n\013BOUNTY_MINI\020&\022\014\n\010MIL"
    "KYWAY\020\'\022\021\n\rMILKYWAY_MINI\020(\022\025\n\021RITTERSPOR"
    "T_NUGAT\020)\022\033\n\027RITTERSPORT_KNUSPERKEKS\020*\022\027"
    "\n\023RITTERSPORT_JOGHURT\020+\022\035\n\031RITTERSPORT_K"
    "NUSPERFLAKES\020,\022\035\n\031RITTERSPORT_NUSS_SPLIT"
    "TER\020-\022\030\n\024RITTERSPORT_MARZIPAN\020.\"U\n\023Objec"
    "tConfiguration\022\n\n\002id\030\001 \002(\005\0222\n\006object\030\002 \003"
    "(\0132\".mission_protobuf.ObjectIdentifier\"\345"
    "\001\n\022LocationIdentifier\022\?\n\004type\030\001 \002(\01621.mi"
    "ssion_protobuf.LocationIdentifier.Locati"
    "onType\022\023\n\013instance_id\030\002 \002(\005\022\023\n\013descripti"
    "on\030\003 \001(\t\"d\n\014LocationType\022\021\n\004NONE\020\377\377\377\377\377\377\377"
    "\377\377\001\022\006\n\002EN\020\000\022\006\n\002SH\020\001\022\006\n\002WS\020\002\022\006\n\002CB\020\003\022\006\n\002W"
    "P\020\004\022\006\n\002PP\020\005\022\t\n\005ROBOT\020\006\022\006\n\002EX\020d\"\314\002\n\tInven"
    "tory\022/\n\005items\030\001 \003(\0132 .mission_protobuf.I"
    "nventory.Item\032\344\001\n\004Item\0222\n\006object\030\001 \002(\0132\""
    ".mission_protobuf.ObjectIdentifier\022\020\n\010qu"
    "antity\030\002 \001(\004\0225\n\tcontainer\030\003 \001(\0132\".missio"
    "n_protobuf.ObjectIdentifier\0226\n\010location\030"
    "\004 \001(\0132$.mission_protobuf.LocationIdentif"
    "ier\"\'\n\010CompType\022\014\n\007COMP_ID\020\320\017\022\r\n\010MSG_TYP"
    "E\020\313\001\"\'\n\010CompType\022\014\n\007COMP_ID\020\320\017\022\r\n\010MSG_TY"
    "PE\020\310\001\"\320\002\n\013Transaction\022\026\n\016transaction_id\030"
    "\001 \002(\004\022\020\n\010order_id\030\002 \002(\004\0222\n\006object\030\003 \002(\0132"
    "\".mission_protobuf.ObjectIdentifier\022\020\n\010q"
    "uantity\030\004 \001(\r\0224\n\006action\030\005 \002(\0162$.mission_"
    "protobuf.Transaction.Action\0224\n\006source\030\006 "
    "\001(\0132$.mission_protobuf.LocationIdentifie"
    "r\0229\n\013destination\030\007 \001(\0132$.mission_protobu"
    "f.LocationIdentifier\"*\n\006Action\022\n\n\006INSERT"
    "\020\001\022\n\n\006REMOVE\020\002\022\010\n\004MOVE\020\003\"n\n\016TransactionL"
    "og\0223\n\014transactions\030\001 \003(\0132\035.mission_proto"
    "buf.Transaction\"\'\n\010CompType\022\014\n\007COMP_ID\020\320"
    "\017\022\r\n\010MSG_TYPE\020\311\001B3\n\037org.mission_planner."
    "common_msgsB\020TaskActionProtos", 2189);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "task_action.proto", &protobuf_RegisterTypes);
  ObjectIdentifier::default_instance_ = new ObjectIdentifier();
  ObjectConfiguration::default_instance_ = new ObjectConfiguration();
  LocationIdentifier::default_instance_ = new LocationIdentifier();
  Inventory::default_instance_ = new Inventory();
  Inventory_Item::default_instance_ = new Inventory_Item();
  Transaction::default_instance_ = new Transaction();
  TransactionLog::default_instance_ = new TransactionLog();
  ObjectIdentifier::default_instance_->InitAsDefaultInstance();
  ObjectConfiguration::default_instance_->InitAsDefaultInstance();
  LocationIdentifier::default_instance_->InitAsDefaultInstance();
  Inventory::default_instance_->InitAsDefaultInstance();
  Inventory_Item::default_instance_->InitAsDefaultInstance();
  Transaction::default_instance_->InitAsDefaultInstance();
  TransactionLog::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_task_5faction_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_task_5faction_2eproto {
  StaticDescriptorInitializer_task_5faction_2eproto() {
    protobuf_AddDesc_task_5faction_2eproto();
  }
} static_descriptor_initializer_task_5faction_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* ObjectIdentifier_ObjectType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectIdentifier_ObjectType_descriptor_;
}
bool ObjectIdentifier_ObjectType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ObjectIdentifier_ObjectType ObjectIdentifier::F20_20_B;
const ObjectIdentifier_ObjectType ObjectIdentifier::F20_20_G;
const ObjectIdentifier_ObjectType ObjectIdentifier::S40_40_B;
const ObjectIdentifier_ObjectType ObjectIdentifier::S40_40_G;
const ObjectIdentifier_ObjectType ObjectIdentifier::M20_100;
const ObjectIdentifier_ObjectType ObjectIdentifier::M20;
const ObjectIdentifier_ObjectType ObjectIdentifier::M30;
const ObjectIdentifier_ObjectType ObjectIdentifier::R20;
const ObjectIdentifier_ObjectType ObjectIdentifier::BEARING_BOX;
const ObjectIdentifier_ObjectType ObjectIdentifier::BEARING;
const ObjectIdentifier_ObjectType ObjectIdentifier::AXIS;
const ObjectIdentifier_ObjectType ObjectIdentifier::DISTANCE_TUBE;
const ObjectIdentifier_ObjectType ObjectIdentifier::MOTOR;
const ObjectIdentifier_ObjectType ObjectIdentifier::CONTAINER_B;
const ObjectIdentifier_ObjectType ObjectIdentifier::CONTAINER_R;
const ObjectIdentifier_ObjectType ObjectIdentifier::PICKUP_BLACK_WHITE;
const ObjectIdentifier_ObjectType ObjectIdentifier::PICKUP_CHOCO_MILK;
const ObjectIdentifier_ObjectType ObjectIdentifier::DUPLO_WHITE;
const ObjectIdentifier_ObjectType ObjectIdentifier::DUPLO_CLASSIC;
const ObjectIdentifier_ObjectType ObjectIdentifier::TWIX_SPEKULATIUS;
const ObjectIdentifier_ObjectType ObjectIdentifier::TWIX_WHITE;
const ObjectIdentifier_ObjectType ObjectIdentifier::TWIX_CLASSIC;
const ObjectIdentifier_ObjectType ObjectIdentifier::TWIX_MINI;
const ObjectIdentifier_ObjectType ObjectIdentifier::MARS;
const ObjectIdentifier_ObjectType ObjectIdentifier::MARS_MINI;
const ObjectIdentifier_ObjectType ObjectIdentifier::SNICKERS;
const ObjectIdentifier_ObjectType ObjectIdentifier::SNICKERS_MINI;
const ObjectIdentifier_ObjectType ObjectIdentifier::KITKAT_CLASSIC;
const ObjectIdentifier_ObjectType ObjectIdentifier::KITKAT_WHITE;
const ObjectIdentifier_ObjectType ObjectIdentifier::KITKAT_CHUNKY_WHITE;
const ObjectIdentifier_ObjectType ObjectIdentifier::KITKAT_CHUNKY_CLASSIC;
const ObjectIdentifier_ObjectType ObjectIdentifier::KITKAT_MINI;
const ObjectIdentifier_ObjectType ObjectIdentifier::LION_CLASSIC;
const ObjectIdentifier_ObjectType ObjectIdentifier::LION_MINI;
const ObjectIdentifier_ObjectType ObjectIdentifier::M_M_CRIPSY;
const ObjectIdentifier_ObjectType ObjectIdentifier::M_M_PEANUT;
const ObjectIdentifier_ObjectType ObjectIdentifier::BOUNTY;
const ObjectIdentifier_ObjectType ObjectIdentifier::BOUNTY_MINI;
const ObjectIdentifier_ObjectType ObjectIdentifier::MILKYWAY;
const ObjectIdentifier_ObjectType ObjectIdentifier::MILKYWAY_MINI;
const ObjectIdentifier_ObjectType ObjectIdentifier::RITTERSPORT_NUGAT;
const ObjectIdentifier_ObjectType ObjectIdentifier::RITTERSPORT_KNUSPERKEKS;
const ObjectIdentifier_ObjectType ObjectIdentifier::RITTERSPORT_JOGHURT;
const ObjectIdentifier_ObjectType ObjectIdentifier::RITTERSPORT_KNUSPERFLAKES;
const ObjectIdentifier_ObjectType ObjectIdentifier::RITTERSPORT_NUSS_SPLITTER;
const ObjectIdentifier_ObjectType ObjectIdentifier::RITTERSPORT_MARZIPAN;
const ObjectIdentifier_ObjectType ObjectIdentifier::ObjectType_MIN;
const ObjectIdentifier_ObjectType ObjectIdentifier::ObjectType_MAX;
const int ObjectIdentifier::ObjectType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ObjectIdentifier::kTypeFieldNumber;
const int ObjectIdentifier::kTypeIdFieldNumber;
const int ObjectIdentifier::kInstanceIdFieldNumber;
const int ObjectIdentifier::kDescriptionFieldNumber;
const int ObjectIdentifier::kImageDescriptionFieldNumber;
#endif  // !_MSC_VER

ObjectIdentifier::ObjectIdentifier()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mission_protobuf.ObjectIdentifier)
}

void ObjectIdentifier::InitAsDefaultInstance() {
}

ObjectIdentifier::ObjectIdentifier(const ObjectIdentifier& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mission_protobuf.ObjectIdentifier)
}

void ObjectIdentifier::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = 1;
  type_id_ = GOOGLE_LONGLONG(0);
  instance_id_ = GOOGLE_LONGLONG(0);
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  image_description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObjectIdentifier::~ObjectIdentifier() {
  // @@protoc_insertion_point(destructor:mission_protobuf.ObjectIdentifier)
  SharedDtor();
}

void ObjectIdentifier::SharedDtor() {
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete description_;
  }
  if (image_description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete image_description_;
  }
  if (this != default_instance_) {
  }
}

void ObjectIdentifier::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectIdentifier::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectIdentifier_descriptor_;
}

const ObjectIdentifier& ObjectIdentifier::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_5faction_2eproto();
  return *default_instance_;
}

ObjectIdentifier* ObjectIdentifier::default_instance_ = NULL;

ObjectIdentifier* ObjectIdentifier::New() const {
  return new ObjectIdentifier;
}

void ObjectIdentifier::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ObjectIdentifier*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(type_id_, instance_id_);
    type_ = 1;
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        description_->clear();
      }
    }
    if (has_image_description()) {
      if (image_description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        image_description_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ObjectIdentifier::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mission_protobuf.ObjectIdentifier)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mission_protobuf.ObjectIdentifier.ObjectType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mission_protobuf::ObjectIdentifier_ObjectType_IsValid(value)) {
            set_type(static_cast< ::mission_protobuf::ObjectIdentifier_ObjectType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type_id;
        break;
      }

      // optional int64 type_id = 2;
      case 2: {
        if (tag == 16) {
         parse_type_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &type_id_)));
          set_has_type_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_instance_id;
        break;
      }

      // optional int64 instance_id = 3;
      case 3: {
        if (tag == 24) {
         parse_instance_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &instance_id_)));
          set_has_instance_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_description;
        break;
      }

      // optional string description = 4;
      case 4: {
        if (tag == 34) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "description");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_image_description;
        break;
      }

      // optional string image_description = 5;
      case 5: {
        if (tag == 42) {
         parse_image_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_image_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->image_description().data(), this->image_description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "image_description");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mission_protobuf.ObjectIdentifier)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mission_protobuf.ObjectIdentifier)
  return false;
#undef DO_
}

void ObjectIdentifier::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mission_protobuf.ObjectIdentifier)
  // required .mission_protobuf.ObjectIdentifier.ObjectType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional int64 type_id = 2;
  if (has_type_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->type_id(), output);
  }

  // optional int64 instance_id = 3;
  if (has_instance_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->instance_id(), output);
  }

  // optional string description = 4;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->description(), output);
  }

  // optional string image_description = 5;
  if (has_image_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->image_description().data(), this->image_description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "image_description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->image_description(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mission_protobuf.ObjectIdentifier)
}

::google::protobuf::uint8* ObjectIdentifier::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mission_protobuf.ObjectIdentifier)
  // required .mission_protobuf.ObjectIdentifier.ObjectType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional int64 type_id = 2;
  if (has_type_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->type_id(), target);
  }

  // optional int64 instance_id = 3;
  if (has_instance_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->instance_id(), target);
  }

  // optional string description = 4;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->description(), target);
  }

  // optional string image_description = 5;
  if (has_image_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->image_description().data(), this->image_description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "image_description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->image_description(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mission_protobuf.ObjectIdentifier)
  return target;
}

int ObjectIdentifier::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .mission_protobuf.ObjectIdentifier.ObjectType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional int64 type_id = 2;
    if (has_type_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->type_id());
    }

    // optional int64 instance_id = 3;
    if (has_instance_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->instance_id());
    }

    // optional string description = 4;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional string image_description = 5;
    if (has_image_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->image_description());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectIdentifier::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ObjectIdentifier* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ObjectIdentifier*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ObjectIdentifier::MergeFrom(const ObjectIdentifier& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_type_id()) {
      set_type_id(from.type_id());
    }
    if (from.has_instance_id()) {
      set_instance_id(from.instance_id());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_image_description()) {
      set_image_description(from.image_description());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ObjectIdentifier::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectIdentifier::CopyFrom(const ObjectIdentifier& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectIdentifier::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ObjectIdentifier::Swap(ObjectIdentifier* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(type_id_, other->type_id_);
    std::swap(instance_id_, other->instance_id_);
    std::swap(description_, other->description_);
    std::swap(image_description_, other->image_description_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ObjectIdentifier::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectIdentifier_descriptor_;
  metadata.reflection = ObjectIdentifier_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ObjectConfiguration::kIdFieldNumber;
const int ObjectConfiguration::kObjectFieldNumber;
#endif  // !_MSC_VER

ObjectConfiguration::ObjectConfiguration()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mission_protobuf.ObjectConfiguration)
}

void ObjectConfiguration::InitAsDefaultInstance() {
}

ObjectConfiguration::ObjectConfiguration(const ObjectConfiguration& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mission_protobuf.ObjectConfiguration)
}

void ObjectConfiguration::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ObjectConfiguration::~ObjectConfiguration() {
  // @@protoc_insertion_point(destructor:mission_protobuf.ObjectConfiguration)
  SharedDtor();
}

void ObjectConfiguration::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ObjectConfiguration::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ObjectConfiguration::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ObjectConfiguration_descriptor_;
}

const ObjectConfiguration& ObjectConfiguration::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_5faction_2eproto();
  return *default_instance_;
}

ObjectConfiguration* ObjectConfiguration::default_instance_ = NULL;

ObjectConfiguration* ObjectConfiguration::New() const {
  return new ObjectConfiguration;
}

void ObjectConfiguration::Clear() {
  id_ = 0;
  object_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ObjectConfiguration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mission_protobuf.ObjectConfiguration)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_object;
        break;
      }

      // repeated .mission_protobuf.ObjectIdentifier object = 2;
      case 2: {
        if (tag == 18) {
         parse_object:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_object()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_object;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mission_protobuf.ObjectConfiguration)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mission_protobuf.ObjectConfiguration)
  return false;
#undef DO_
}

void ObjectConfiguration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mission_protobuf.ObjectConfiguration)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // repeated .mission_protobuf.ObjectIdentifier object = 2;
  for (int i = 0; i < this->object_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->object(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mission_protobuf.ObjectConfiguration)
}

::google::protobuf::uint8* ObjectConfiguration::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mission_protobuf.ObjectConfiguration)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // repeated .mission_protobuf.ObjectIdentifier object = 2;
  for (int i = 0; i < this->object_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->object(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mission_protobuf.ObjectConfiguration)
  return target;
}

int ObjectConfiguration::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  // repeated .mission_protobuf.ObjectIdentifier object = 2;
  total_size += 1 * this->object_size();
  for (int i = 0; i < this->object_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->object(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjectConfiguration::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ObjectConfiguration* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ObjectConfiguration*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ObjectConfiguration::MergeFrom(const ObjectConfiguration& from) {
  GOOGLE_CHECK_NE(&from, this);
  object_.MergeFrom(from.object_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ObjectConfiguration::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectConfiguration::CopyFrom(const ObjectConfiguration& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectConfiguration::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->object())) return false;
  return true;
}

void ObjectConfiguration::Swap(ObjectConfiguration* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    object_.Swap(&other->object_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ObjectConfiguration::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ObjectConfiguration_descriptor_;
  metadata.reflection = ObjectConfiguration_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* LocationIdentifier_LocationType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LocationIdentifier_LocationType_descriptor_;
}
bool LocationIdentifier_LocationType_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 100:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const LocationIdentifier_LocationType LocationIdentifier::NONE;
const LocationIdentifier_LocationType LocationIdentifier::EN;
const LocationIdentifier_LocationType LocationIdentifier::SH;
const LocationIdentifier_LocationType LocationIdentifier::WS;
const LocationIdentifier_LocationType LocationIdentifier::CB;
const LocationIdentifier_LocationType LocationIdentifier::WP;
const LocationIdentifier_LocationType LocationIdentifier::PP;
const LocationIdentifier_LocationType LocationIdentifier::ROBOT;
const LocationIdentifier_LocationType LocationIdentifier::EX;
const LocationIdentifier_LocationType LocationIdentifier::LocationType_MIN;
const LocationIdentifier_LocationType LocationIdentifier::LocationType_MAX;
const int LocationIdentifier::LocationType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int LocationIdentifier::kTypeFieldNumber;
const int LocationIdentifier::kInstanceIdFieldNumber;
const int LocationIdentifier::kDescriptionFieldNumber;
#endif  // !_MSC_VER

LocationIdentifier::LocationIdentifier()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mission_protobuf.LocationIdentifier)
}

void LocationIdentifier::InitAsDefaultInstance() {
}

LocationIdentifier::LocationIdentifier(const LocationIdentifier& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mission_protobuf.LocationIdentifier)
}

void LocationIdentifier::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  type_ = -1;
  instance_id_ = 0;
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LocationIdentifier::~LocationIdentifier() {
  // @@protoc_insertion_point(destructor:mission_protobuf.LocationIdentifier)
  SharedDtor();
}

void LocationIdentifier::SharedDtor() {
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete description_;
  }
  if (this != default_instance_) {
  }
}

void LocationIdentifier::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LocationIdentifier::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LocationIdentifier_descriptor_;
}

const LocationIdentifier& LocationIdentifier::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_5faction_2eproto();
  return *default_instance_;
}

LocationIdentifier* LocationIdentifier::default_instance_ = NULL;

LocationIdentifier* LocationIdentifier::New() const {
  return new LocationIdentifier;
}

void LocationIdentifier::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    type_ = -1;
    instance_id_ = 0;
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        description_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LocationIdentifier::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mission_protobuf.LocationIdentifier)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mission_protobuf.LocationIdentifier.LocationType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mission_protobuf::LocationIdentifier_LocationType_IsValid(value)) {
            set_type(static_cast< ::mission_protobuf::LocationIdentifier_LocationType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_instance_id;
        break;
      }

      // required int32 instance_id = 2;
      case 2: {
        if (tag == 16) {
         parse_instance_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instance_id_)));
          set_has_instance_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_description;
        break;
      }

      // optional string description = 3;
      case 3: {
        if (tag == 26) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "description");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mission_protobuf.LocationIdentifier)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mission_protobuf.LocationIdentifier)
  return false;
#undef DO_
}

void LocationIdentifier::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mission_protobuf.LocationIdentifier)
  // required .mission_protobuf.LocationIdentifier.LocationType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required int32 instance_id = 2;
  if (has_instance_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->instance_id(), output);
  }

  // optional string description = 3;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->description(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mission_protobuf.LocationIdentifier)
}

::google::protobuf::uint8* LocationIdentifier::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mission_protobuf.LocationIdentifier)
  // required .mission_protobuf.LocationIdentifier.LocationType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required int32 instance_id = 2;
  if (has_instance_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->instance_id(), target);
  }

  // optional string description = 3;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->description(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mission_protobuf.LocationIdentifier)
  return target;
}

int LocationIdentifier::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .mission_protobuf.LocationIdentifier.LocationType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // required int32 instance_id = 2;
    if (has_instance_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->instance_id());
    }

    // optional string description = 3;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LocationIdentifier::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LocationIdentifier* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LocationIdentifier*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LocationIdentifier::MergeFrom(const LocationIdentifier& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_instance_id()) {
      set_instance_id(from.instance_id());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LocationIdentifier::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LocationIdentifier::CopyFrom(const LocationIdentifier& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocationIdentifier::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void LocationIdentifier::Swap(LocationIdentifier* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(instance_id_, other->instance_id_);
    std::swap(description_, other->description_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LocationIdentifier::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LocationIdentifier_descriptor_;
  metadata.reflection = LocationIdentifier_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Inventory_CompType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Inventory_CompType_descriptor_;
}
bool Inventory_CompType_IsValid(int value) {
  switch(value) {
    case 200:
    case 2000:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Inventory_CompType Inventory::COMP_ID;
const Inventory_CompType Inventory::MSG_TYPE;
const Inventory_CompType Inventory::CompType_MIN;
const Inventory_CompType Inventory::CompType_MAX;
const int Inventory::CompType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* Inventory_Item_CompType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Inventory_Item_CompType_descriptor_;
}
bool Inventory_Item_CompType_IsValid(int value) {
  switch(value) {
    case 203:
    case 2000:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Inventory_Item_CompType Inventory_Item::COMP_ID;
const Inventory_Item_CompType Inventory_Item::MSG_TYPE;
const Inventory_Item_CompType Inventory_Item::CompType_MIN;
const Inventory_Item_CompType Inventory_Item::CompType_MAX;
const int Inventory_Item::CompType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Inventory_Item::kObjectFieldNumber;
const int Inventory_Item::kQuantityFieldNumber;
const int Inventory_Item::kContainerFieldNumber;
const int Inventory_Item::kLocationFieldNumber;
#endif  // !_MSC_VER

Inventory_Item::Inventory_Item()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mission_protobuf.Inventory.Item)
}

void Inventory_Item::InitAsDefaultInstance() {
  object_ = const_cast< ::mission_protobuf::ObjectIdentifier*>(&::mission_protobuf::ObjectIdentifier::default_instance());
  container_ = const_cast< ::mission_protobuf::ObjectIdentifier*>(&::mission_protobuf::ObjectIdentifier::default_instance());
  location_ = const_cast< ::mission_protobuf::LocationIdentifier*>(&::mission_protobuf::LocationIdentifier::default_instance());
}

Inventory_Item::Inventory_Item(const Inventory_Item& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mission_protobuf.Inventory.Item)
}

void Inventory_Item::SharedCtor() {
  _cached_size_ = 0;
  object_ = NULL;
  quantity_ = GOOGLE_ULONGLONG(0);
  container_ = NULL;
  location_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Inventory_Item::~Inventory_Item() {
  // @@protoc_insertion_point(destructor:mission_protobuf.Inventory.Item)
  SharedDtor();
}

void Inventory_Item::SharedDtor() {
  if (this != default_instance_) {
    delete object_;
    delete container_;
    delete location_;
  }
}

void Inventory_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Inventory_Item::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Inventory_Item_descriptor_;
}

const Inventory_Item& Inventory_Item::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_5faction_2eproto();
  return *default_instance_;
}

Inventory_Item* Inventory_Item::default_instance_ = NULL;

Inventory_Item* Inventory_Item::New() const {
  return new Inventory_Item;
}

void Inventory_Item::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_object()) {
      if (object_ != NULL) object_->::mission_protobuf::ObjectIdentifier::Clear();
    }
    quantity_ = GOOGLE_ULONGLONG(0);
    if (has_container()) {
      if (container_ != NULL) container_->::mission_protobuf::ObjectIdentifier::Clear();
    }
    if (has_location()) {
      if (location_ != NULL) location_->::mission_protobuf::LocationIdentifier::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Inventory_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mission_protobuf.Inventory.Item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mission_protobuf.ObjectIdentifier object = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_object()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_quantity;
        break;
      }

      // optional uint64 quantity = 2;
      case 2: {
        if (tag == 16) {
         parse_quantity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &quantity_)));
          set_has_quantity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_container;
        break;
      }

      // optional .mission_protobuf.ObjectIdentifier container = 3;
      case 3: {
        if (tag == 26) {
         parse_container:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_container()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_location;
        break;
      }

      // optional .mission_protobuf.LocationIdentifier location = 4;
      case 4: {
        if (tag == 34) {
         parse_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_location()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mission_protobuf.Inventory.Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mission_protobuf.Inventory.Item)
  return false;
#undef DO_
}

void Inventory_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mission_protobuf.Inventory.Item)
  // required .mission_protobuf.ObjectIdentifier object = 1;
  if (has_object()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->object(), output);
  }

  // optional uint64 quantity = 2;
  if (has_quantity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->quantity(), output);
  }

  // optional .mission_protobuf.ObjectIdentifier container = 3;
  if (has_container()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->container(), output);
  }

  // optional .mission_protobuf.LocationIdentifier location = 4;
  if (has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->location(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mission_protobuf.Inventory.Item)
}

::google::protobuf::uint8* Inventory_Item::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mission_protobuf.Inventory.Item)
  // required .mission_protobuf.ObjectIdentifier object = 1;
  if (has_object()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->object(), target);
  }

  // optional uint64 quantity = 2;
  if (has_quantity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->quantity(), target);
  }

  // optional .mission_protobuf.ObjectIdentifier container = 3;
  if (has_container()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->container(), target);
  }

  // optional .mission_protobuf.LocationIdentifier location = 4;
  if (has_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->location(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mission_protobuf.Inventory.Item)
  return target;
}

int Inventory_Item::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .mission_protobuf.ObjectIdentifier object = 1;
    if (has_object()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->object());
    }

    // optional uint64 quantity = 2;
    if (has_quantity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->quantity());
    }

    // optional .mission_protobuf.ObjectIdentifier container = 3;
    if (has_container()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->container());
    }

    // optional .mission_protobuf.LocationIdentifier location = 4;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->location());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Inventory_Item::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Inventory_Item* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Inventory_Item*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Inventory_Item::MergeFrom(const Inventory_Item& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_object()) {
      mutable_object()->::mission_protobuf::ObjectIdentifier::MergeFrom(from.object());
    }
    if (from.has_quantity()) {
      set_quantity(from.quantity());
    }
    if (from.has_container()) {
      mutable_container()->::mission_protobuf::ObjectIdentifier::MergeFrom(from.container());
    }
    if (from.has_location()) {
      mutable_location()->::mission_protobuf::LocationIdentifier::MergeFrom(from.location());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Inventory_Item::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Inventory_Item::CopyFrom(const Inventory_Item& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Inventory_Item::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_object()) {
    if (!this->object().IsInitialized()) return false;
  }
  if (has_container()) {
    if (!this->container().IsInitialized()) return false;
  }
  if (has_location()) {
    if (!this->location().IsInitialized()) return false;
  }
  return true;
}

void Inventory_Item::Swap(Inventory_Item* other) {
  if (other != this) {
    std::swap(object_, other->object_);
    std::swap(quantity_, other->quantity_);
    std::swap(container_, other->container_);
    std::swap(location_, other->location_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Inventory_Item::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Inventory_Item_descriptor_;
  metadata.reflection = Inventory_Item_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Inventory::kItemsFieldNumber;
#endif  // !_MSC_VER

Inventory::Inventory()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mission_protobuf.Inventory)
}

void Inventory::InitAsDefaultInstance() {
}

Inventory::Inventory(const Inventory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mission_protobuf.Inventory)
}

void Inventory::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Inventory::~Inventory() {
  // @@protoc_insertion_point(destructor:mission_protobuf.Inventory)
  SharedDtor();
}

void Inventory::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Inventory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Inventory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Inventory_descriptor_;
}

const Inventory& Inventory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_5faction_2eproto();
  return *default_instance_;
}

Inventory* Inventory::default_instance_ = NULL;

Inventory* Inventory::New() const {
  return new Inventory;
}

void Inventory::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Inventory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mission_protobuf.Inventory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mission_protobuf.Inventory.Item items = 1;
      case 1: {
        if (tag == 10) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_items;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mission_protobuf.Inventory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mission_protobuf.Inventory)
  return false;
#undef DO_
}

void Inventory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mission_protobuf.Inventory)
  // repeated .mission_protobuf.Inventory.Item items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mission_protobuf.Inventory)
}

::google::protobuf::uint8* Inventory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mission_protobuf.Inventory)
  // repeated .mission_protobuf.Inventory.Item items = 1;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mission_protobuf.Inventory)
  return target;
}

int Inventory::ByteSize() const {
  int total_size = 0;

  // repeated .mission_protobuf.Inventory.Item items = 1;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Inventory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Inventory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Inventory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Inventory::MergeFrom(const Inventory& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Inventory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Inventory::CopyFrom(const Inventory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Inventory::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->items())) return false;
  return true;
}

void Inventory::Swap(Inventory* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Inventory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Inventory_descriptor_;
  metadata.reflection = Inventory_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Transaction_Action_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Transaction_Action_descriptor_;
}
bool Transaction_Action_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Transaction_Action Transaction::INSERT;
const Transaction_Action Transaction::REMOVE;
const Transaction_Action Transaction::MOVE;
const Transaction_Action Transaction::Action_MIN;
const Transaction_Action Transaction::Action_MAX;
const int Transaction::Action_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Transaction::kTransactionIdFieldNumber;
const int Transaction::kOrderIdFieldNumber;
const int Transaction::kObjectFieldNumber;
const int Transaction::kQuantityFieldNumber;
const int Transaction::kActionFieldNumber;
const int Transaction::kSourceFieldNumber;
const int Transaction::kDestinationFieldNumber;
#endif  // !_MSC_VER

Transaction::Transaction()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mission_protobuf.Transaction)
}

void Transaction::InitAsDefaultInstance() {
  object_ = const_cast< ::mission_protobuf::ObjectIdentifier*>(&::mission_protobuf::ObjectIdentifier::default_instance());
  source_ = const_cast< ::mission_protobuf::LocationIdentifier*>(&::mission_protobuf::LocationIdentifier::default_instance());
  destination_ = const_cast< ::mission_protobuf::LocationIdentifier*>(&::mission_protobuf::LocationIdentifier::default_instance());
}

Transaction::Transaction(const Transaction& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mission_protobuf.Transaction)
}

void Transaction::SharedCtor() {
  _cached_size_ = 0;
  transaction_id_ = GOOGLE_ULONGLONG(0);
  order_id_ = GOOGLE_ULONGLONG(0);
  object_ = NULL;
  quantity_ = 0u;
  action_ = 1;
  source_ = NULL;
  destination_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Transaction::~Transaction() {
  // @@protoc_insertion_point(destructor:mission_protobuf.Transaction)
  SharedDtor();
}

void Transaction::SharedDtor() {
  if (this != default_instance_) {
    delete object_;
    delete source_;
    delete destination_;
  }
}

void Transaction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Transaction::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Transaction_descriptor_;
}

const Transaction& Transaction::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_5faction_2eproto();
  return *default_instance_;
}

Transaction* Transaction::default_instance_ = NULL;

Transaction* Transaction::New() const {
  return new Transaction;
}

void Transaction::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Transaction*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(transaction_id_, order_id_);
    if (has_object()) {
      if (object_ != NULL) object_->::mission_protobuf::ObjectIdentifier::Clear();
    }
    quantity_ = 0u;
    action_ = 1;
    if (has_source()) {
      if (source_ != NULL) source_->::mission_protobuf::LocationIdentifier::Clear();
    }
    if (has_destination()) {
      if (destination_ != NULL) destination_->::mission_protobuf::LocationIdentifier::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Transaction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mission_protobuf.Transaction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 transaction_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &transaction_id_)));
          set_has_transaction_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_order_id;
        break;
      }

      // required uint64 order_id = 2;
      case 2: {
        if (tag == 16) {
         parse_order_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &order_id_)));
          set_has_order_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_object;
        break;
      }

      // required .mission_protobuf.ObjectIdentifier object = 3;
      case 3: {
        if (tag == 26) {
         parse_object:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_object()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_quantity;
        break;
      }

      // optional uint32 quantity = 4;
      case 4: {
        if (tag == 32) {
         parse_quantity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quantity_)));
          set_has_quantity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_action;
        break;
      }

      // required .mission_protobuf.Transaction.Action action = 5;
      case 5: {
        if (tag == 40) {
         parse_action:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mission_protobuf::Transaction_Action_IsValid(value)) {
            set_action(static_cast< ::mission_protobuf::Transaction_Action >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_source;
        break;
      }

      // optional .mission_protobuf.LocationIdentifier source = 6;
      case 6: {
        if (tag == 50) {
         parse_source:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_source()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_destination;
        break;
      }

      // optional .mission_protobuf.LocationIdentifier destination = 7;
      case 7: {
        if (tag == 58) {
         parse_destination:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_destination()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mission_protobuf.Transaction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mission_protobuf.Transaction)
  return false;
#undef DO_
}

void Transaction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mission_protobuf.Transaction)
  // required uint64 transaction_id = 1;
  if (has_transaction_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->transaction_id(), output);
  }

  // required uint64 order_id = 2;
  if (has_order_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->order_id(), output);
  }

  // required .mission_protobuf.ObjectIdentifier object = 3;
  if (has_object()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->object(), output);
  }

  // optional uint32 quantity = 4;
  if (has_quantity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->quantity(), output);
  }

  // required .mission_protobuf.Transaction.Action action = 5;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->action(), output);
  }

  // optional .mission_protobuf.LocationIdentifier source = 6;
  if (has_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->source(), output);
  }

  // optional .mission_protobuf.LocationIdentifier destination = 7;
  if (has_destination()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->destination(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mission_protobuf.Transaction)
}

::google::protobuf::uint8* Transaction::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mission_protobuf.Transaction)
  // required uint64 transaction_id = 1;
  if (has_transaction_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->transaction_id(), target);
  }

  // required uint64 order_id = 2;
  if (has_order_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->order_id(), target);
  }

  // required .mission_protobuf.ObjectIdentifier object = 3;
  if (has_object()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->object(), target);
  }

  // optional uint32 quantity = 4;
  if (has_quantity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->quantity(), target);
  }

  // required .mission_protobuf.Transaction.Action action = 5;
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->action(), target);
  }

  // optional .mission_protobuf.LocationIdentifier source = 6;
  if (has_source()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->source(), target);
  }

  // optional .mission_protobuf.LocationIdentifier destination = 7;
  if (has_destination()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->destination(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mission_protobuf.Transaction)
  return target;
}

int Transaction::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 transaction_id = 1;
    if (has_transaction_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->transaction_id());
    }

    // required uint64 order_id = 2;
    if (has_order_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->order_id());
    }

    // required .mission_protobuf.ObjectIdentifier object = 3;
    if (has_object()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->object());
    }

    // optional uint32 quantity = 4;
    if (has_quantity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quantity());
    }

    // required .mission_protobuf.Transaction.Action action = 5;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
    }

    // optional .mission_protobuf.LocationIdentifier source = 6;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->source());
    }

    // optional .mission_protobuf.LocationIdentifier destination = 7;
    if (has_destination()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->destination());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Transaction::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Transaction* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Transaction*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Transaction::MergeFrom(const Transaction& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_transaction_id()) {
      set_transaction_id(from.transaction_id());
    }
    if (from.has_order_id()) {
      set_order_id(from.order_id());
    }
    if (from.has_object()) {
      mutable_object()->::mission_protobuf::ObjectIdentifier::MergeFrom(from.object());
    }
    if (from.has_quantity()) {
      set_quantity(from.quantity());
    }
    if (from.has_action()) {
      set_action(from.action());
    }
    if (from.has_source()) {
      mutable_source()->::mission_protobuf::LocationIdentifier::MergeFrom(from.source());
    }
    if (from.has_destination()) {
      mutable_destination()->::mission_protobuf::LocationIdentifier::MergeFrom(from.destination());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Transaction::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Transaction::CopyFrom(const Transaction& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transaction::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000017) != 0x00000017) return false;

  if (has_object()) {
    if (!this->object().IsInitialized()) return false;
  }
  if (has_source()) {
    if (!this->source().IsInitialized()) return false;
  }
  if (has_destination()) {
    if (!this->destination().IsInitialized()) return false;
  }
  return true;
}

void Transaction::Swap(Transaction* other) {
  if (other != this) {
    std::swap(transaction_id_, other->transaction_id_);
    std::swap(order_id_, other->order_id_);
    std::swap(object_, other->object_);
    std::swap(quantity_, other->quantity_);
    std::swap(action_, other->action_);
    std::swap(source_, other->source_);
    std::swap(destination_, other->destination_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Transaction::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Transaction_descriptor_;
  metadata.reflection = Transaction_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* TransactionLog_CompType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransactionLog_CompType_descriptor_;
}
bool TransactionLog_CompType_IsValid(int value) {
  switch(value) {
    case 201:
    case 2000:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TransactionLog_CompType TransactionLog::COMP_ID;
const TransactionLog_CompType TransactionLog::MSG_TYPE;
const TransactionLog_CompType TransactionLog::CompType_MIN;
const TransactionLog_CompType TransactionLog::CompType_MAX;
const int TransactionLog::CompType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int TransactionLog::kTransactionsFieldNumber;
#endif  // !_MSC_VER

TransactionLog::TransactionLog()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mission_protobuf.TransactionLog)
}

void TransactionLog::InitAsDefaultInstance() {
}

TransactionLog::TransactionLog(const TransactionLog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mission_protobuf.TransactionLog)
}

void TransactionLog::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TransactionLog::~TransactionLog() {
  // @@protoc_insertion_point(destructor:mission_protobuf.TransactionLog)
  SharedDtor();
}

void TransactionLog::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TransactionLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TransactionLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TransactionLog_descriptor_;
}

const TransactionLog& TransactionLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_task_5faction_2eproto();
  return *default_instance_;
}

TransactionLog* TransactionLog::default_instance_ = NULL;

TransactionLog* TransactionLog::New() const {
  return new TransactionLog;
}

void TransactionLog::Clear() {
  transactions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TransactionLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mission_protobuf.TransactionLog)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .mission_protobuf.Transaction transactions = 1;
      case 1: {
        if (tag == 10) {
         parse_transactions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_transactions()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_transactions;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mission_protobuf.TransactionLog)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mission_protobuf.TransactionLog)
  return false;
#undef DO_
}

void TransactionLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mission_protobuf.TransactionLog)
  // repeated .mission_protobuf.Transaction transactions = 1;
  for (int i = 0; i < this->transactions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->transactions(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mission_protobuf.TransactionLog)
}

::google::protobuf::uint8* TransactionLog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mission_protobuf.TransactionLog)
  // repeated .mission_protobuf.Transaction transactions = 1;
  for (int i = 0; i < this->transactions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->transactions(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mission_protobuf.TransactionLog)
  return target;
}

int TransactionLog::ByteSize() const {
  int total_size = 0;

  // repeated .mission_protobuf.Transaction transactions = 1;
  total_size += 1 * this->transactions_size();
  for (int i = 0; i < this->transactions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->transactions(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TransactionLog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TransactionLog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TransactionLog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TransactionLog::MergeFrom(const TransactionLog& from) {
  GOOGLE_CHECK_NE(&from, this);
  transactions_.MergeFrom(from.transactions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TransactionLog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TransactionLog::CopyFrom(const TransactionLog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionLog::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->transactions())) return false;
  return true;
}

void TransactionLog::Swap(TransactionLog* other) {
  if (other != this) {
    transactions_.Swap(&other->transactions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TransactionLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TransactionLog_descriptor_;
  metadata.reflection = TransactionLog_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace mission_protobuf

// @@protoc_insertion_point(global_scope)
