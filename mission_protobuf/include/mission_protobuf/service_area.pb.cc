// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service_area.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "service_area.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mission_protobuf {

namespace {

const ::google::protobuf::Descriptor* ServiceArea_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServiceArea_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_service_5farea_2eproto() {
  protobuf_AddDesc_service_5farea_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "service_area.proto");
  GOOGLE_CHECK(file != NULL);
  ServiceArea_descriptor_ = file->message_type(0);
  static const int ServiceArea_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceArea, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceArea, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceArea, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceArea, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceArea, diameter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceArea, tilt_angle_),
  };
  ServiceArea_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServiceArea_descriptor_,
      ServiceArea::default_instance_,
      ServiceArea_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceArea, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceArea, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServiceArea));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_service_5farea_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServiceArea_descriptor_, &ServiceArea::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_service_5farea_2eproto() {
  delete ServiceArea::default_instance_;
  delete ServiceArea_reflection_;
}

void protobuf_AddDesc_service_5farea_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022service_area.proto\022\020mission_protobuf\"w"
    "\n\013ServiceArea\022\023\n\013description\030\001 \002(\t\022\016\n\006le"
    "ngth\030\002 \002(\001\022\r\n\005width\030\003 \002(\001\022\016\n\006height\030\004 \002("
    "\001\022\020\n\010diameter\030\005 \002(\001\022\022\n\ntilt_angle\030\006 \002(\001B"
    "4\n\037org.mission_planner.common_msgsB\021Serv"
    "iceAreaProtos", 213);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "service_area.proto", &protobuf_RegisterTypes);
  ServiceArea::default_instance_ = new ServiceArea();
  ServiceArea::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_service_5farea_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_service_5farea_2eproto {
  StaticDescriptorInitializer_service_5farea_2eproto() {
    protobuf_AddDesc_service_5farea_2eproto();
  }
} static_descriptor_initializer_service_5farea_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ServiceArea::kDescriptionFieldNumber;
const int ServiceArea::kLengthFieldNumber;
const int ServiceArea::kWidthFieldNumber;
const int ServiceArea::kHeightFieldNumber;
const int ServiceArea::kDiameterFieldNumber;
const int ServiceArea::kTiltAngleFieldNumber;
#endif  // !_MSC_VER

ServiceArea::ServiceArea()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mission_protobuf.ServiceArea)
}

void ServiceArea::InitAsDefaultInstance() {
}

ServiceArea::ServiceArea(const ServiceArea& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mission_protobuf.ServiceArea)
}

void ServiceArea::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  length_ = 0;
  width_ = 0;
  height_ = 0;
  diameter_ = 0;
  tilt_angle_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServiceArea::~ServiceArea() {
  // @@protoc_insertion_point(destructor:mission_protobuf.ServiceArea)
  SharedDtor();
}

void ServiceArea::SharedDtor() {
  if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete description_;
  }
  if (this != default_instance_) {
  }
}

void ServiceArea::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServiceArea::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServiceArea_descriptor_;
}

const ServiceArea& ServiceArea::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_service_5farea_2eproto();
  return *default_instance_;
}

ServiceArea* ServiceArea::default_instance_ = NULL;

ServiceArea* ServiceArea::New() const {
  return new ServiceArea;
}

void ServiceArea::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ServiceArea*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(length_, tilt_angle_);
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        description_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServiceArea::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mission_protobuf.ServiceArea)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string description = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "description");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_length;
        break;
      }

      // required double length = 2;
      case 2: {
        if (tag == 17) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_width;
        break;
      }

      // required double width = 3;
      case 3: {
        if (tag == 25) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_height;
        break;
      }

      // required double height = 4;
      case 4: {
        if (tag == 33) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_diameter;
        break;
      }

      // required double diameter = 5;
      case 5: {
        if (tag == 41) {
         parse_diameter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &diameter_)));
          set_has_diameter();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_tilt_angle;
        break;
      }

      // required double tilt_angle = 6;
      case 6: {
        if (tag == 49) {
         parse_tilt_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tilt_angle_)));
          set_has_tilt_angle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mission_protobuf.ServiceArea)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mission_protobuf.ServiceArea)
  return false;
#undef DO_
}

void ServiceArea::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mission_protobuf.ServiceArea)
  // required string description = 1;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->description(), output);
  }

  // required double length = 2;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->length(), output);
  }

  // required double width = 3;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->width(), output);
  }

  // required double height = 4;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->height(), output);
  }

  // required double diameter = 5;
  if (has_diameter()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->diameter(), output);
  }

  // required double tilt_angle = 6;
  if (has_tilt_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->tilt_angle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mission_protobuf.ServiceArea)
}

::google::protobuf::uint8* ServiceArea::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mission_protobuf.ServiceArea)
  // required string description = 1;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->description(), target);
  }

  // required double length = 2;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->length(), target);
  }

  // required double width = 3;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->width(), target);
  }

  // required double height = 4;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->height(), target);
  }

  // required double diameter = 5;
  if (has_diameter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->diameter(), target);
  }

  // required double tilt_angle = 6;
  if (has_tilt_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->tilt_angle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mission_protobuf.ServiceArea)
  return target;
}

int ServiceArea::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string description = 1;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // required double length = 2;
    if (has_length()) {
      total_size += 1 + 8;
    }

    // required double width = 3;
    if (has_width()) {
      total_size += 1 + 8;
    }

    // required double height = 4;
    if (has_height()) {
      total_size += 1 + 8;
    }

    // required double diameter = 5;
    if (has_diameter()) {
      total_size += 1 + 8;
    }

    // required double tilt_angle = 6;
    if (has_tilt_angle()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServiceArea::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServiceArea* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServiceArea*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServiceArea::MergeFrom(const ServiceArea& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_diameter()) {
      set_diameter(from.diameter());
    }
    if (from.has_tilt_angle()) {
      set_tilt_angle(from.tilt_angle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServiceArea::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceArea::CopyFrom(const ServiceArea& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceArea::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void ServiceArea::Swap(ServiceArea* other) {
  if (other != this) {
    std::swap(description_, other->description_);
    std::swap(length_, other->length_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(diameter_, other->diameter_);
    std::swap(tilt_angle_, other->tilt_angle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServiceArea::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServiceArea_descriptor_;
  metadata.reflection = ServiceArea_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace mission_protobuf

// @@protoc_insertion_point(global_scope)
