// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: geometry.proto

#ifndef PROTOBUF_geometry_2eproto__INCLUDED
#define PROTOBUF_geometry_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace mission_protobuf {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_geometry_2eproto();
void protobuf_AssignDesc_geometry_2eproto();
void protobuf_ShutdownFile_geometry_2eproto();

class Geometry;
class Geometry_Pose;
class Geometry_Pose_Point;
class Geometry_Pose_Quaternion;

// ===================================================================

class Geometry_Pose_Point : public ::google::protobuf::Message {
 public:
  Geometry_Pose_Point();
  virtual ~Geometry_Pose_Point();

  Geometry_Pose_Point(const Geometry_Pose_Point& from);

  inline Geometry_Pose_Point& operator=(const Geometry_Pose_Point& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Geometry_Pose_Point& default_instance();

  void Swap(Geometry_Pose_Point* other);

  // implements Message ----------------------------------------------

  Geometry_Pose_Point* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Geometry_Pose_Point& from);
  void MergeFrom(const Geometry_Pose_Point& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline double x() const;
  inline void set_x(double value);

  // required double y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline double y() const;
  inline void set_y(double value);

  // required double z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline double z() const;
  inline void set_z(double value);

  // @@protoc_insertion_point(class_scope:mission_protobuf.Geometry.Pose.Point)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double x_;
  double y_;
  double z_;
  friend void  protobuf_AddDesc_geometry_2eproto();
  friend void protobuf_AssignDesc_geometry_2eproto();
  friend void protobuf_ShutdownFile_geometry_2eproto();

  void InitAsDefaultInstance();
  static Geometry_Pose_Point* default_instance_;
};
// -------------------------------------------------------------------

class Geometry_Pose_Quaternion : public ::google::protobuf::Message {
 public:
  Geometry_Pose_Quaternion();
  virtual ~Geometry_Pose_Quaternion();

  Geometry_Pose_Quaternion(const Geometry_Pose_Quaternion& from);

  inline Geometry_Pose_Quaternion& operator=(const Geometry_Pose_Quaternion& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Geometry_Pose_Quaternion& default_instance();

  void Swap(Geometry_Pose_Quaternion* other);

  // implements Message ----------------------------------------------

  Geometry_Pose_Quaternion* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Geometry_Pose_Quaternion& from);
  void MergeFrom(const Geometry_Pose_Quaternion& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline double x() const;
  inline void set_x(double value);

  // required double y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline double y() const;
  inline void set_y(double value);

  // required double z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline double z() const;
  inline void set_z(double value);

  // required double w = 4;
  inline bool has_w() const;
  inline void clear_w();
  static const int kWFieldNumber = 4;
  inline double w() const;
  inline void set_w(double value);

  // @@protoc_insertion_point(class_scope:mission_protobuf.Geometry.Pose.Quaternion)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();
  inline void set_has_w();
  inline void clear_has_w();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double x_;
  double y_;
  double z_;
  double w_;
  friend void  protobuf_AddDesc_geometry_2eproto();
  friend void protobuf_AssignDesc_geometry_2eproto();
  friend void protobuf_ShutdownFile_geometry_2eproto();

  void InitAsDefaultInstance();
  static Geometry_Pose_Quaternion* default_instance_;
};
// -------------------------------------------------------------------

class Geometry_Pose : public ::google::protobuf::Message {
 public:
  Geometry_Pose();
  virtual ~Geometry_Pose();

  Geometry_Pose(const Geometry_Pose& from);

  inline Geometry_Pose& operator=(const Geometry_Pose& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Geometry_Pose& default_instance();

  void Swap(Geometry_Pose* other);

  // implements Message ----------------------------------------------

  Geometry_Pose* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Geometry_Pose& from);
  void MergeFrom(const Geometry_Pose& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Geometry_Pose_Point Point;
  typedef Geometry_Pose_Quaternion Quaternion;

  // accessors -------------------------------------------------------

  // required .mission_protobuf.Geometry.Pose.Point position = 1;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 1;
  inline const ::mission_protobuf::Geometry_Pose_Point& position() const;
  inline ::mission_protobuf::Geometry_Pose_Point* mutable_position();
  inline ::mission_protobuf::Geometry_Pose_Point* release_position();
  inline void set_allocated_position(::mission_protobuf::Geometry_Pose_Point* position);

  // required .mission_protobuf.Geometry.Pose.Quaternion orientation = 2;
  inline bool has_orientation() const;
  inline void clear_orientation();
  static const int kOrientationFieldNumber = 2;
  inline const ::mission_protobuf::Geometry_Pose_Quaternion& orientation() const;
  inline ::mission_protobuf::Geometry_Pose_Quaternion* mutable_orientation();
  inline ::mission_protobuf::Geometry_Pose_Quaternion* release_orientation();
  inline void set_allocated_orientation(::mission_protobuf::Geometry_Pose_Quaternion* orientation);

  // @@protoc_insertion_point(class_scope:mission_protobuf.Geometry.Pose)
 private:
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_orientation();
  inline void clear_has_orientation();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::mission_protobuf::Geometry_Pose_Point* position_;
  ::mission_protobuf::Geometry_Pose_Quaternion* orientation_;
  friend void  protobuf_AddDesc_geometry_2eproto();
  friend void protobuf_AssignDesc_geometry_2eproto();
  friend void protobuf_ShutdownFile_geometry_2eproto();

  void InitAsDefaultInstance();
  static Geometry_Pose* default_instance_;
};
// -------------------------------------------------------------------

class Geometry : public ::google::protobuf::Message {
 public:
  Geometry();
  virtual ~Geometry();

  Geometry(const Geometry& from);

  inline Geometry& operator=(const Geometry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Geometry& default_instance();

  void Swap(Geometry* other);

  // implements Message ----------------------------------------------

  Geometry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Geometry& from);
  void MergeFrom(const Geometry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Geometry_Pose Pose;

  // accessors -------------------------------------------------------

  // required .mission_protobuf.Geometry.Pose pose = 1;
  inline bool has_pose() const;
  inline void clear_pose();
  static const int kPoseFieldNumber = 1;
  inline const ::mission_protobuf::Geometry_Pose& pose() const;
  inline ::mission_protobuf::Geometry_Pose* mutable_pose();
  inline ::mission_protobuf::Geometry_Pose* release_pose();
  inline void set_allocated_pose(::mission_protobuf::Geometry_Pose* pose);

  // @@protoc_insertion_point(class_scope:mission_protobuf.Geometry)
 private:
  inline void set_has_pose();
  inline void clear_has_pose();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::mission_protobuf::Geometry_Pose* pose_;
  friend void  protobuf_AddDesc_geometry_2eproto();
  friend void protobuf_AssignDesc_geometry_2eproto();
  friend void protobuf_ShutdownFile_geometry_2eproto();

  void InitAsDefaultInstance();
  static Geometry* default_instance_;
};
// ===================================================================


// ===================================================================

// Geometry_Pose_Point

// required double x = 1;
inline bool Geometry_Pose_Point::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Geometry_Pose_Point::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Geometry_Pose_Point::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Geometry_Pose_Point::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline double Geometry_Pose_Point::x() const {
  // @@protoc_insertion_point(field_get:mission_protobuf.Geometry.Pose.Point.x)
  return x_;
}
inline void Geometry_Pose_Point::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:mission_protobuf.Geometry.Pose.Point.x)
}

// required double y = 2;
inline bool Geometry_Pose_Point::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Geometry_Pose_Point::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Geometry_Pose_Point::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Geometry_Pose_Point::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline double Geometry_Pose_Point::y() const {
  // @@protoc_insertion_point(field_get:mission_protobuf.Geometry.Pose.Point.y)
  return y_;
}
inline void Geometry_Pose_Point::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:mission_protobuf.Geometry.Pose.Point.y)
}

// required double z = 3;
inline bool Geometry_Pose_Point::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Geometry_Pose_Point::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Geometry_Pose_Point::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Geometry_Pose_Point::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline double Geometry_Pose_Point::z() const {
  // @@protoc_insertion_point(field_get:mission_protobuf.Geometry.Pose.Point.z)
  return z_;
}
inline void Geometry_Pose_Point::set_z(double value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:mission_protobuf.Geometry.Pose.Point.z)
}

// -------------------------------------------------------------------

// Geometry_Pose_Quaternion

// required double x = 1;
inline bool Geometry_Pose_Quaternion::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Geometry_Pose_Quaternion::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Geometry_Pose_Quaternion::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Geometry_Pose_Quaternion::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline double Geometry_Pose_Quaternion::x() const {
  // @@protoc_insertion_point(field_get:mission_protobuf.Geometry.Pose.Quaternion.x)
  return x_;
}
inline void Geometry_Pose_Quaternion::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:mission_protobuf.Geometry.Pose.Quaternion.x)
}

// required double y = 2;
inline bool Geometry_Pose_Quaternion::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Geometry_Pose_Quaternion::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Geometry_Pose_Quaternion::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Geometry_Pose_Quaternion::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline double Geometry_Pose_Quaternion::y() const {
  // @@protoc_insertion_point(field_get:mission_protobuf.Geometry.Pose.Quaternion.y)
  return y_;
}
inline void Geometry_Pose_Quaternion::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:mission_protobuf.Geometry.Pose.Quaternion.y)
}

// required double z = 3;
inline bool Geometry_Pose_Quaternion::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Geometry_Pose_Quaternion::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Geometry_Pose_Quaternion::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Geometry_Pose_Quaternion::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline double Geometry_Pose_Quaternion::z() const {
  // @@protoc_insertion_point(field_get:mission_protobuf.Geometry.Pose.Quaternion.z)
  return z_;
}
inline void Geometry_Pose_Quaternion::set_z(double value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:mission_protobuf.Geometry.Pose.Quaternion.z)
}

// required double w = 4;
inline bool Geometry_Pose_Quaternion::has_w() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Geometry_Pose_Quaternion::set_has_w() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Geometry_Pose_Quaternion::clear_has_w() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Geometry_Pose_Quaternion::clear_w() {
  w_ = 0;
  clear_has_w();
}
inline double Geometry_Pose_Quaternion::w() const {
  // @@protoc_insertion_point(field_get:mission_protobuf.Geometry.Pose.Quaternion.w)
  return w_;
}
inline void Geometry_Pose_Quaternion::set_w(double value) {
  set_has_w();
  w_ = value;
  // @@protoc_insertion_point(field_set:mission_protobuf.Geometry.Pose.Quaternion.w)
}

// -------------------------------------------------------------------

// Geometry_Pose

// required .mission_protobuf.Geometry.Pose.Point position = 1;
inline bool Geometry_Pose::has_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Geometry_Pose::set_has_position() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Geometry_Pose::clear_has_position() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Geometry_Pose::clear_position() {
  if (position_ != NULL) position_->::mission_protobuf::Geometry_Pose_Point::Clear();
  clear_has_position();
}
inline const ::mission_protobuf::Geometry_Pose_Point& Geometry_Pose::position() const {
  // @@protoc_insertion_point(field_get:mission_protobuf.Geometry.Pose.position)
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
inline ::mission_protobuf::Geometry_Pose_Point* Geometry_Pose::mutable_position() {
  set_has_position();
  if (position_ == NULL) position_ = new ::mission_protobuf::Geometry_Pose_Point;
  // @@protoc_insertion_point(field_mutable:mission_protobuf.Geometry.Pose.position)
  return position_;
}
inline ::mission_protobuf::Geometry_Pose_Point* Geometry_Pose::release_position() {
  clear_has_position();
  ::mission_protobuf::Geometry_Pose_Point* temp = position_;
  position_ = NULL;
  return temp;
}
inline void Geometry_Pose::set_allocated_position(::mission_protobuf::Geometry_Pose_Point* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
  // @@protoc_insertion_point(field_set_allocated:mission_protobuf.Geometry.Pose.position)
}

// required .mission_protobuf.Geometry.Pose.Quaternion orientation = 2;
inline bool Geometry_Pose::has_orientation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Geometry_Pose::set_has_orientation() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Geometry_Pose::clear_has_orientation() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Geometry_Pose::clear_orientation() {
  if (orientation_ != NULL) orientation_->::mission_protobuf::Geometry_Pose_Quaternion::Clear();
  clear_has_orientation();
}
inline const ::mission_protobuf::Geometry_Pose_Quaternion& Geometry_Pose::orientation() const {
  // @@protoc_insertion_point(field_get:mission_protobuf.Geometry.Pose.orientation)
  return orientation_ != NULL ? *orientation_ : *default_instance_->orientation_;
}
inline ::mission_protobuf::Geometry_Pose_Quaternion* Geometry_Pose::mutable_orientation() {
  set_has_orientation();
  if (orientation_ == NULL) orientation_ = new ::mission_protobuf::Geometry_Pose_Quaternion;
  // @@protoc_insertion_point(field_mutable:mission_protobuf.Geometry.Pose.orientation)
  return orientation_;
}
inline ::mission_protobuf::Geometry_Pose_Quaternion* Geometry_Pose::release_orientation() {
  clear_has_orientation();
  ::mission_protobuf::Geometry_Pose_Quaternion* temp = orientation_;
  orientation_ = NULL;
  return temp;
}
inline void Geometry_Pose::set_allocated_orientation(::mission_protobuf::Geometry_Pose_Quaternion* orientation) {
  delete orientation_;
  orientation_ = orientation;
  if (orientation) {
    set_has_orientation();
  } else {
    clear_has_orientation();
  }
  // @@protoc_insertion_point(field_set_allocated:mission_protobuf.Geometry.Pose.orientation)
}

// -------------------------------------------------------------------

// Geometry

// required .mission_protobuf.Geometry.Pose pose = 1;
inline bool Geometry::has_pose() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Geometry::set_has_pose() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Geometry::clear_has_pose() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Geometry::clear_pose() {
  if (pose_ != NULL) pose_->::mission_protobuf::Geometry_Pose::Clear();
  clear_has_pose();
}
inline const ::mission_protobuf::Geometry_Pose& Geometry::pose() const {
  // @@protoc_insertion_point(field_get:mission_protobuf.Geometry.pose)
  return pose_ != NULL ? *pose_ : *default_instance_->pose_;
}
inline ::mission_protobuf::Geometry_Pose* Geometry::mutable_pose() {
  set_has_pose();
  if (pose_ == NULL) pose_ = new ::mission_protobuf::Geometry_Pose;
  // @@protoc_insertion_point(field_mutable:mission_protobuf.Geometry.pose)
  return pose_;
}
inline ::mission_protobuf::Geometry_Pose* Geometry::release_pose() {
  clear_has_pose();
  ::mission_protobuf::Geometry_Pose* temp = pose_;
  pose_ = NULL;
  return temp;
}
inline void Geometry::set_allocated_pose(::mission_protobuf::Geometry_Pose* pose) {
  delete pose_;
  pose_ = pose;
  if (pose) {
    set_has_pose();
  } else {
    clear_has_pose();
  }
  // @@protoc_insertion_point(field_set_allocated:mission_protobuf.Geometry.pose)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace mission_protobuf

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_geometry_2eproto__INCLUDED
